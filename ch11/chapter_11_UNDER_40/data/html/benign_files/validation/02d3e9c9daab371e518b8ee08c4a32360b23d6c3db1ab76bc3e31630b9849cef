<!DOCTYPE html> <html> <head lang="en"> <meta http-equiv="X-UA-Compatible" content="IE=edge"> <meta charset="UTF-8"> <title> Everything you need to know about BabelJS </title> <meta name="viewport" content="width=device-width, initial-scale=1"> <meta name="author" content="Kliment Petrov"/> <meta name="description" content="Kliment Petrov - JavaScript Developer, in love with Javascript and Web Technologies"> <meta name="keywords" content="front-end, development, javascript, html, css, responsive, web optimization, code magic" /> <!--[if lt IE 10]> <link rel="stylesheet" href="/assets/css/styles.min.css"/> <![endif]--> <style> html { height: 100%; font-family: sans-serif; } body { font-family: "Rubik", Verdana, sans-serif; font-size: 16px; font-weight: 400; line-height: 1.35; color: #121212; margin: 0; } .wrapper { position: relative; min-height: 100%; } header { padding: 36px 0; } article, aside, details, figcaption, figure, footer, header, main, menu, nav, section, summary { display: block; } .container { position: relative; width: 80%; max-width: 960px; margin: 0 auto; padding: 0; box-sizing: border-box; } a { background-color: transparent; color: #2424ed; } .logo { font-family: "Droid Sans", Verdana, sans-serif; font-size: 3em; font-weight: 700; color: #121212; text-decoration: none; float: left; } .presentation-logo { float: left; } .hashnode { float: left; clear: left; background: url("/assets/images/hashnode.png") no-repeat left center; padding: 2px 0 2px 30px; color: #00b8d3; text-decoration: none; } .header-navigation { float: right; } ul { list-style: inside; } ol, ul { padding-left: 0; margin-top: 0; } pre, blockquote, dl, figure, table, p, ul, ol, form { margin-bottom: 2.5rem; } .navigation { text-align: right; margin-top: 20px; } li { margin-bottom: 1rem; } .navigation li { display: inline-block; margin: 0 7px; } .navigation li, .contact-list li { padding: 0 0 1rem; } .navigation li a { font-size: 1.1em; color: #121212; text-decoration: none; } h1, h2, h3, h4, h5, h6 { font-family: "Droid Sans", Verdana, sans-serif; font-weight: 700; line-height: 1.25; margin-top: 0; margin-bottom: 1rem; } h1 { font-size: 4.5rem; margin: 0.67em 0; line-height: 1.2; letter-spacing: -0.1rem; } .heading { text-align: center; margin-top: 0.5em; margin-bottom: 1.2em; } .posts { list-style: none; } .column, .columns { width: 100%; float: left; box-sizing: border-box; margin-left: 4%; } .posts li { display: inline-block; width: 100%; margin-bottom: 1.1rem; border-bottom: 1px solid #ececec; } .meta { color: #787f85; display: block; margin-bottom: 10px; font-size: 1.15rem; } h2 { font-size: 4.2rem; line-height: 1.25; letter-spacing: -0.1rem; } .posts h2 { font-size: 2.5rem; margin-bottom: 1.3rem; } .post-title { float: left; text-decoration: none; line-height: 1; color: #121212; } .posts-description { font-size: 1.15em; max-width: 62em; font-weight: 300; margin-bottom: 1.1rem } .previous { float: right; } .next { float: left; } .previous, .next { width: 130px; text-align: center; display: none; font-size: 30px; padding: 5px 10px; border: 1px solid #121212; border-radius: 5px; color: #121212; text-decoration: none; } @media all and (max-width: 949px) { .presentation-logo { display: block; float: none; text-align: center; } .hashnode { float: none; display: inline-block; margin: 15px 0; } .logo { float: none; display: inline-block; text-align: center; margin-top: 0; } .header-navigation { float: none } .navigation { text-align: center; display: block;} .container { width: 90% } .column, .columns { margin-left: 0 } } @media all and (max-width: 950px) { .posts h2 { font-size: 1.85em } } </style> <script> var cb = function() { var l = document.createElement('link'); l.rel = 'stylesheet'; l.href = '/assets/css/styles.css'; var h = document.getElementsByTagName('head')[0]; h.parentNode.insertBefore(l, h); }; var raf = requestAnimationFrame || mozRequestAnimationFrame || webkitRequestAnimationFrame || msRequestAnimationFrame; if (raf) raf(cb); else window.addEventListener('load', cb); </script> </head> <body> <div id="hidden" class="wrapper" style="display: none;"> <header> <div class="container"> <div class="row"> <section class="presentation-logo"> <a class="logo" href='/' title="Logo text">Kleo Petrov</a> <br /> <a class="hashnode" target="_blank" href="https://hashnode.com/@Kleo">Hashnode Evangelist and Top Contributor</a> </section> <nav class="header-navigation"> <ul class="navigation row"> <li><a href="/">Home</a></li> <li><a href="/about">About</a></li> <li><a href="/archive">Archive</a></li> </ul> </nav> </div> </div> </header> <div class="container"> <div class="row"> <div class="post"> <h1>Everything you need to know about BabelJS</h1> <p><img src="http://kleopetrov.me/assets/images/posts/babel.jpg" alt="Babel Logo" /></p> <p><a href="https://babeljs.io">Babel</a> is a tool for transpiling (compiling) ES6/ES7 code to ECMAScript 5 code, which can be used <strong>today</strong> in any modern browser. Even more - Babel has extensions for transpiling JSX for React and Flow syntax for static type checking.</p> <p>It’s composed of various small modules. Out of the box, Babel doesn’t do anything. It uses presets for compiling the code, which we will cover later on.</p> <blockquote> <p><strong>Note:</strong> I assume you are comfortable using the command line and have installed <a href="https://nodejs.org/en/">node</a> and <a href="https://www.npmjs.com/">npm</a>. Also make sure you have <code class="highlighter-rouge">package.json</code> in your project folder. More info - <a href="https://docs.npmjs.com/cli/init">npm init</a></p> </blockquote> <h3 id="babel-cli">babel-cli</h3> <p>Babel CLI is a tool for transpiling the code through the command line. While you can install it globally, using <code class="highlighter-rouge">npm install babel-cli -g</code>, it’s recommended to install it locally project by project with <code class="highlighter-rouge">npm install babel-cli --save-dev</code>.</p> <p>There are two main advantages for this:</p> <ol> <li>Different projects on the same machine can depend on different versions of Babel.</li> <li>You don’t have implicit dependency on the dev environment you are working on. Your project will be way more portable and maintainable.</li> </ol> <p>After installing <code class="highlighter-rouge">babel-cli</code> and saved it as a dev dependency, you can run the following commands from the terminal:</p> <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>babel example.js --out-file compiled.js
</code></pre></div></div> <p>Let’s see what every piece of the command does:</p> <ul> <li><code class="highlighter-rouge">babel</code> - calling Babel</li> <li><code class="highlighter-rouge">example.js</code> - the input ES6/ES7 file</li> <li><code class="highlighter-rouge">--out-file</code> - the option passed to Babel for compiling a file. We can also use <code class="highlighter-rouge">--out-dir</code> for compiling all files in a directory. The short versions of the options are <code class="highlighter-rouge">-o</code> for <code class="highlighter-rouge">--out-file</code> and <code class="highlighter-rouge">-d</code> for <code class="highlighter-rouge">--output-dir</code></li> <li><code class="highlighter-rouge">compiled.js</code> - the output file</li> </ul> <p>Typing the command every time you make a change can be a tedious work. We can automate the process using npm scripts. In you <code class="highlighter-rouge">package.json</code>, add a new <em>build</em> task:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="p">...</span>
    <span class="s2">"scripts"</span><span class="p">:</span> <span class="p">{</span>
        <span class="s2">"build"</span><span class="p">:</span> <span class="s2">"babel ./src -d ./lib -w"</span>
    <span class="p">}</span>
    <span class="p">...</span>
<span class="p">}</span>
</code></pre></div></div> <p>So now, you can run the script from the command line using <code class="highlighter-rouge">npm run build</code>. The <code class="highlighter-rouge">-w</code> option in the script instructs npm to watch for changes in the <code class="highlighter-rouge">src</code> folder. Every time you make a change to a file in <code class="highlighter-rouge">src</code>, Babel will transpile the code and save it in the <code class="highlighter-rouge">lib</code> folder with the same name.</p> <h2 id="babel-register">babel-register</h2> <p><code class="highlighter-rouge">babel-register</code> is a require hook, that will bind node’s <code class="highlighter-rouge">require</code> method and automatically transpile the file on the fly. <strong>This is not meant for production!</strong> It’s considered a bad practice to compile the code this way. It’s far better to compile the code before deploying.</p> <p>However this works quite well for development purposes.</p> <p>Let’s install <code class="highlighter-rouge">babel-register</code> first:</p> <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install babel-register --save-dev
</code></pre></div></div> <p>Create a simple <code class="highlighter-rouge">index.js</code> file:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Hello Babel'</span><span class="p">);</span>
</code></pre></div></div> <p>and require index.js:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">require</span><span class="p">(</span><span class="s1">'babel-register'</span><span class="p">);</span>
<span class="nx">require</span><span class="p">(</span><span class="s1">'index.js'</span><span class="p">);</span>
</code></pre></div></div> <p>When you run the code using <code class="highlighter-rouge">node register.js</code> you will see the output of <code class="highlighter-rouge">index.js</code> - <code class="highlighter-rouge">"Hello World"</code>.</p> <p><strong>Note</strong>: You can’t require in the same file that you want to compile, because Node is executing the file before Babel’s transile.</p> <h3 id="babel-node">babel-node</h3> <p>For running some code via the command line the easiest way to integrate Babel is to use <code class="highlighter-rouge">babel-node</code> CLI, which is a replacement of node CLI.</p> <p><strong>This is also not meant for production use!</strong></p> <p><code class="highlighter-rouge">babel-node</code> comes with <code class="highlighter-rouge">babel-cli</code>, so make sure you have it installed first.</p> <p>Then you can simply replace <code class="highlighter-rouge">node</code> with <code class="highlighter-rouge">babel-node</code>:</p> <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>babel-node register.js
</code></pre></div></div> <p>The returned result will be again <code class="highlighter-rouge">"Hello World"</code>.</p> <h2 id="configuring-babel">Configuring Babel</h2> <p>As mentioned earlier, Babel doesn’t transpile any code without explicitly telling it what to do. It just moves the files from one place to another.</p> <p>You can give Babel instructions on what to do by installing plugins and presets.</p> <h3 id="babelrc">.babelrc</h3> <p>The <code class="highlighter-rouge">.babelrc</code> file is the configuration file for Babel. Start off with it like this:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="s2">"presets"</span><span class="p">:</span> <span class="p">[],</span>
    <span class="s2">"plugins"</span><span class="p">:</span> <span class="p">[]</span>
<span class="p">}</span>
</code></pre></div></div> <p>Let’s start telling Babel to transpile ES6 code to ES5. We do this by using the es2015 preset:</p> <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install babel-preset-es2015 --save-dev
</code></pre></div></div> <p>Modify <code class="highlighter-rouge">.babelrc</code> and add the preset:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="s2">"presets"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"es2015"</span><span class="p">],</span>
    <span class="s2">"plugins"</span><span class="p">:</span> <span class="p">[]</span>
<span class="p">}</span>
</code></pre></div></div> <p>Setting up React is just as easy:</p> <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install babel-preset-react --save-dev
</code></pre></div></div> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="s2">"presets"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"es2015"</span><span class="p">,</span> <span class="s2">"react"</span><span class="p">],</span>
    <span class="s2">"plugins"</span><span class="p">:</span> <span class="p">[]</span>
<span class="p">}</span>
</code></pre></div></div> <p>JavaScript has some proposals for new features that are not yet finalized. They are separated into 5 states (0 to 4). As proposals gain more traction and are more likely to be accepted into the standard they proceed through the various stages, finally being accepted into the standard at stage 4.</p> <p>In Babel, these changes are bundled in 4 different presets:</p> <ul> <li><code class="highlighter-rouge">babel-preset-stage-0</code></li> <li><code class="highlighter-rouge">babel-preset-stage-1</code></li> <li><code class="highlighter-rouge">babel-preset-stage-2</code></li> <li><code class="highlighter-rouge">babel-preset-stage-3</code></li> </ul> <p>There is no <code class="highlighter-rouge">babel-preset-stage-4</code> as it’s simply <code class="highlighter-rouge">babel-preset-es2015</code>.</p> <p>Each of these presets requires the later preset. For example <code class="highlighter-rouge">babel-preset-stage-1</code> requires <code class="highlighter-rouge">babel-preset-stage-2</code> and <code class="highlighter-rouge">babel-preset-stage-3</code>.</p> <p>Simply install the stage you want to use:</p> <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install babel-preset-stage-2
</code></pre></div></div> <p>Then add it to Babel config file:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="s2">"presets"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"es2015"</span><span class="p">,</span> <span class="s2">"react"</span><span class="p">,</span> <span class="s2">"stage-2"</span><span class="p">],</span>
    <span class="s2">"plugins"</span><span class="p">:</span> <span class="p">[]</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="babel-polyfill">babel-polyfill</h3> <p><code class="highlighter-rouge">babel-polyfill</code> will emulate a full ES6 environment. For example, without the polyfill, the following code:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">allAdd</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="kr">arguments</span><span class="p">).</span><span class="nx">map</span><span class="p">((</span><span class="nx">a</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">+</span> <span class="mi">2</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>will be transpiled to:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">allAdd</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">argument</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div> <p>This code will not work everywhere, because <code class="highlighter-rouge">Array.from</code> in not supported by every browser:</p> <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Uncaught TypeError: Array.from is not a function
</code></pre></div></div> <p>To solve this problem we need to use a polyfill. A polyfill is a piece of code, that replicate the native API that does not exist in the current runtime. Babel uses <a href="https://github.com/zloirock/core-js">core-js</a> as it’s polyfill and <a href="https://github.com/facebook/regenerator">regenerator</a> for its generators and async functions.</p> <p>To include the Babel polyfill, we need to install it:</p> <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install babel-polyfill --save-dev
</code></pre></div></div> <p>Then, simply include the polyfill at the top of any file that requires it:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s1">'babel-polyfill'</span><span class="p">;</span>
</code></pre></div></div> <h2 id="advanced-babel-configuration">Advanced Babel Configuration</h2> <p>Most people can get by using the build-in presets, but Babel exposes much more power than that.</p> <h3 id="specify-plugins-manually">Specify plugins manually</h3> <p>Babel presets are just collections of pre-configured plugins. You can manually add plugins if you want to do something different.</p> <p>Let’s say for example that you want to use <a href="https://github.com/wycats/javascript-decorators/blob/master/README.md">JavaScript Decorators</a>. You need to install the decorators plugin:</p> <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install babel-plugin-transform-decorators --save-dev
</code></pre></div></div> <p>and add it in <code class="highlighter-rouge">.babelrc</code>:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="s2">"presets"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"es2015"</span><span class="p">],</span>
  <span class="s2">"plugins"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"transform-decorators"</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div> <p>For a full list of official plugins see <a href="http://babeljs.io/docs/plugins/">Babel Plugins</a>. Also you can check the npm registry for <a href="https://www.npmjs.com/search?q=babel-plugin">community build plugins</a>.</p> <p>Some plugins have also has options to configure. For example, many transforms have a “loose” mode which drops some spec behavior in favor of simpler and more performant generated code.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
   <span class="p">...</span>
   <span class="nx">plugins</span><span class="p">:</span>  <span class="p">[</span><span class="s2">"transform-es2015-classes"</span><span class="p">,</span> <span class="p">{</span> <span class="s2">"loose"</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}]</span>
   <span class="p">...</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="customizing-babel-based-on-environment">Customizing Babel based on environment</h3> <p>Babel has plugins that can help you in the development process, as plugins for optimizing code for production. You can configure which plugins to load, based on the environment you are:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="s2">"presets"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"es2015"</span><span class="p">],</span>
    <span class="s2">"env"</span><span class="p">:</span> <span class="p">{</span>
        <span class="s2">"development"</span><span class="p">:</span> <span class="p">{</span>
            <span class="s2">"plugins"</span><span class="p">:</span> <span class="p">[...]</span>
        <span class="p">},</span>
        <span class="s2">"production"</span><span class="p">:</span> <span class="p">{</span>
            <span class="s2">"plugins"</span><span class="p">:</span> <span class="p">[...]</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>The current environment will use <code class="highlighter-rouge">process.env.BABEL_ENV</code>. If <code class="highlighter-rouge">BABEL_ENV</code> is not present, it will use <code class="highlighter-rouge">process.env.NODE_ENV</code>. If <code class="highlighter-rouge">NODE_ENV</code> is not available too, it will default to <code class="highlighter-rouge">development</code>.</p> <p>Setting project environment is done differently on Unix and Windows systems.</p> <p><em>Unix</em>:</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ BABEL_ENV</span><span class="o">=</span>development
<span class="nv">$ NODE_ENV</span><span class="o">=</span>development</code></pre></figure> <p><em>Windows</em>:</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>SET <span class="nv">BABEL_ENV</span><span class="o">=</span>development
<span class="nv">$ </span>SET <span class="nv">NODE_ENV</span><span class="o">=</span>development</code></pre></figure> <p>It’s a good idea to use <a href="https://www.npmjs.com/package/cross-env">cross-env</a> - a npm package which allows you to provide a script which sets an environment using unix style and have it work on windows too.</p> <h2 id="own-presets">Own Presets</h2> <p>Writing the same configurations again and again seems like a ton of work. That’s why you can create your own presets.</p> <p>Say you have the following <code class="highlighter-rouge">.babelrc</code>:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="s2">"presets"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"es2015"</span><span class="p">,</span> <span class="s2">"react"</span><span class="p">],</span>
  <span class="s2">"plugins"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"transform-decorators"</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div> <p>All you need to do is name the project folder <code class="highlighter-rouge">babel-preset-*</code> and create two files:</p> <p>A <code class="highlighter-rouge">package.json</code> file with the <code class="highlighter-rouge">dependencies</code> for the preset:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="s2">"name"</span><span class="p">:</span> <span class="s2">"babel-preset-awesome"</span><span class="p">,</span>
  <span class="s2">"version"</span><span class="p">:</span> <span class="s2">"1.0.0"</span><span class="p">,</span>
  <span class="s2">"author"</span><span class="p">:</span> <span class="s2">"Kliment Petrov &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e58e89808a958091978a8383a58288848c89cb868a88">[email&#160;protected]</a>&gt; (http://kleopetrov.me)"</span><span class="p">,</span>
  <span class="s2">"dependencies"</span><span class="p">:</span> <span class="p">{</span>
    <span class="s2">"babel-preset-es2015"</span><span class="p">:</span> <span class="s2">"^6.3.13"</span><span class="p">,</span>
    <span class="s2">"babel-preset-react"</span><span class="p">:</span> <span class="s2">"^6.3.13"</span><span class="p">,</span>
    <span class="s2">"babel-plugin-transform-decorators"</span><span class="p">:</span> <span class="s2">"^6.6.5"</span><span class="p">,</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Then, create an <code class="highlighter-rouge">index.js</code> that exports the context of <code class="highlighter-rouge">.babelrc</code>, replacing the presets and plugins string with <code class="highlighter-rouge">require</code> calls:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="p">{</span>
    <span class="p">{</span>
        <span class="nl">presets</span><span class="p">:</span> <span class="p">[</span>
            <span class="nx">require</span><span class="p">(</span><span class="s2">"es2015"</span><span class="p">),</span>
            <span class="nx">require</span><span class="p">(</span><span class="s2">"react"</span><span class="p">)</span>
        <span class="p">],</span>
        <span class="nx">plugins</span><span class="p">:</span> <span class="p">[</span>
            <span class="nx">require</span><span class="p">(</span><span class="s2">"transform-decorators"</span><span class="p">)</span>
        <span class="p">]</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Then simply publish it to the npm registry.</p> <h2 id="other-tools">Other Tools</h2> <p>Babel can be set up to work with other tools like linting and code style.</p> <h3 id="linting">Linting</h3> <p>One of the most popular linting tools is <a href="http://eslint.org/">ESLint</a>. Babel provides an official integration for it. First, install the package:</p> <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install eslint babel-eslint --save-dev
</code></pre></div></div> <p>Next, create the <code class="highlighter-rouge">.eslintrc</code> in your project and set the <code class="highlighter-rouge">parser</code> to <code class="highlighter-rouge">babel-eslint</code>:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="s2">"parser"</span><span class="p">:</span> <span class="s2">"babel-eslint"</span><span class="p">,</span>
    <span class="s2">"rules"</span><span class="p">:</span> <span class="p">{</span>
    <span class="p">...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>You can then easily add a new npm task in your <code class="highlighter-rouge">package.json</code>:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="p">...</span>
    <span class="s2">"scripts"</span><span class="p">:</span> <span class="p">{</span>
        <span class="s2">"lint"</span><span class="p">:</span> <span class="s2">"eslint ./src/*.js*"</span>
    <span class="p">}</span>
    <span class="p">...</span>
<span class="p">}</span>
</code></pre></div></div> <p>In the command you can type <code class="highlighter-rouge">npm run lint</code>.</p> <h3 id="editors">Editors</h3> <p>With the growing popularity of Babel, more and more editors provide support for it through addons:</p> <ul> <li><a href="https://github.com/babel/babel-sublime">Sublime Text</a></li> <li><a href="https://babeljs.io/docs/setup/#webstorm">Webstorm</a></li> <li><a href="https://atom.io/packages/language-babel">Atom</a></li> <li><a href="https://github.com/jbgutierrez/vim-babel">vim</a></li> </ul> <h2 id="conclusion">Conclusion</h2> <p>Babel and its surrounding ecosystem is playing an essential role for today’s modern web applications. With the provided information above, you should be ready to start using the latest JavaScript specs and accompanied technologies (JSX, Flow, etc.) from now on. Keep calm and code on!</p> <script data-cfasync="false" src="/cdn-cgi/scripts/d07b1474/cloudflare-static/email-decode.min.js"></script><script type="text/javascript"> (function(d, s, id){ var js, fjs = d.getElementsByTagName(s)[0], r = Math.floor(new Date().getTime() / 1000000); if (d.getElementById(id)) {return;} js = d.createElement(s); js.id = id; js.async=1; js.src = "https://www.opinionstage.com/assets/loader.js?" + r; fjs.parentNode.insertBefore(js, fjs); }(document, 'script', 'os-widget-jssdk')); </script> <div class="os_poll" data-path="/polls/2473719" id="os-widget-2473719"></div> <div id="disqus_thread"></div> <script type="text/javascript"> /* * * CONFIGURATION VARIABLES * * */ var disqus_shortname = 'kleopetroff'; /* * * DON'T EDIT BELOW THIS LINE * * */ (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js'; (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })(); </script> <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript> </div> </div> </div> <footer> <div class="container"> <div class="row"> <div class="twelve columns"> <h6>Made with <span class="love">&#9829;</span> by Kliment Petrov</h6> <div class="social"> <a href="http://github.com/Kleopetroff" target="_blank"><img src="/assets/images/icons/github.png" alt="Github Icon"/></a> <a href="https://plus.google.com/+KlimentPetrov" target="_blank"><img src="/assets/images/icons/google-plus.png" alt="Google+ Icon"/></a> <a href="https://bg.linkedin.com/in/kliment-petrov-957735a4" target="_blank"><img src="/assets/images/icons/linkedin.png" alt="LinkedIn Icon"/></a> <a href="http://twitter.com/Kleopetroff" target="_blank"><img src="/assets/images/icons/twitter.png" alt="Twitter Icon"/></a> </div> </div> </div> </div> </footer> </div> <script> (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','/assets/js/analytics.js','ga'); ga('create', 'UA-64685267-1', 'auto'); ga('send', 'pageview'); </script> <script>window.onload = function () { document.getElementById('hidden').style.display = 'block' }</script> </body> </html>
