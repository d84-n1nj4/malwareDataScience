
<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js"> <!--<![endif]-->
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
    	<title>Make with Ada</title>
		<meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Place favicon.ico and apple-touch-icon.png in the root directory -->

        <link rel="stylesheet" href="/css/normalize.css">
        <link rel="stylesheet" href="/css/main.css">
        
        <link href="/css/symbolset/ss-standard.css" rel="stylesheet" />
	    <link href="/css/symbolset/ss-social-circle.css" rel="stylesheet" />
	 
	    <script src="/js/vendor/modernizr-2.6.2.min.js"></script>
        
        <link href="/js/google-code-prettify/prettify-hemisu.css" media="screen" rel="stylesheet" type="text/css" />
        <script src="/js/google-code-prettify/prettify.js"></script>
        <script src="/js/google-code-prettify/lang-ada.js"></script>
        

        <link rel="stylesheet" type="text/css" href="https://cloud.typography.com/7507492/633846/css/fonts.css" />
        
    </head>
    
    <body onload="prettyPrint()">	
			    	    			
		
	

<header id="main2">
	<div class="widthController standard">
       <hgroup>
	       <a href="http://www.makewithada.org/"><h1>Make with Ada</h1></a>
	       <h2><strong>Programming Competition</strong> &nbsp; June 20 - September 30, 2016</h2>
       </hgroup>       
	</div>
</header>

<div id="menu">

	<div class="widthController standard">
        <nav id="main">
			<a href="/" >Overview</a>
	        <a href="/about" >About</a>
	        <a href="/getting-started" >Getting Started</a>
	        <a href="/judging" >Judging</a>
	        <a href="/faq" >FAQ</a>
	        <a href="/entries" >Entries</a>
	        <a href="/terms" >Terms</a>
	        <a href="/contact" >Contact</a>
	        
        </nav>
	</div>

	<div class="account">
		<div class="widthController standard">
		    				<a href="/register" >Register for the Competition</a>
				<a href="https://www.makewithada.org/login" >Login</a>
								</div>
    </div>

</div>		




		
		<!-- for Judges review -->
	<div class="widthController standard textCopy form">
		
		<div class="projectOverview">
	<h1>EtherScope</h1>
	
	<p><p>EtherScope is a monitoring tool that analyzes the Ethernet traffic.
It runs on a STM32F746 board, reads the Ethernet packets, do some
realtime analysis and displays the results on the 480x272 touch panel.</p>

<p>The EtherScope interface allows to filter the results at different
levels and report various kind of information.</p>
</p>
	
		
	<p class="projectAuthors"><span class="label">Project Lead</span> Stephane Carrez
									
																																													&nbsp;&nbsp;&nbsp;&nbsp;<span class="label">Location</span> Issy Les Moulineaux, France
		<br>
		
		<span class="label">Log Updates</span> 5
	</p>
	
</div>

<h3>Project Log</h3>


				<div class="update">
				
				<div class="entry">
					<p>EtherScope is a monitoring tool that analyzes the Ethernet traffic. It runs on a STM32F746 board, reads the Ethernet packets, do some realtime analysis and displays the results on the 480x272 touch panel.</p>

<p>The EtherScope interface allows to filter the results at different levels and report various kind of information.</p>

<p>The project is split in two parts:</p>

<h2>Ada Embedded Network Stack</h2>

<p>This library is a small network stack that implements ARP, IPv4 protocols
on top of an Ethernet driver.  It can be compiled for a STM32F746 board
to provide IPv4 network access to your project. The Ethernet driver manages
a transmit queue and a receive queue</p>

<p>Sources of this library are available in:  https://github.com/stcarrez/ada-enet</p>

<h2>EtherScope Application</h2>

<p>The EtherScope application has a first task that waits for network packets and do the analysis.</p>

<p>The main EtherScope task manages the display with the user's interaction through the touch panel.</p>

<p>Sources of the EtherScope application are available in: https://github.com/stcarrez/etherscope</p>

				</div>
				<div class="date">
					Posted <strong class="day">Sep 26, 2016</strong> at 
					<strong class="time">03:44</strong>
				</div>
			</div>
		
										
					<div class="update">
				
				<div class="entry">
					<h1>Ada STM32 Ethernet Driver</h1>

<p>At the heart of EtherScope is the Ethernet driver that reads packets from the network.
The Ethernet driver has a simple but very efficient design that allows to avoid memory copies on both
the transmit and receive side. The Ethernet driver has internally two protected objects for the management
of the transmit and receive queues.  The driver implementation has reached a very stable stage and is
able to sustain up to 95 Mbps of traffic, as analyzed by EtherScope.</p>

<p>The article below explains more into details how the driver works
<a href="http://blog.vacs.fr/vacs/blogs/post.html?post=2016/09/29/Using-the-Ada-Embedded-Network-STM32-Ethernet-Driver">Using the Ada Embedded Network STM32 Ethernet Driver</a></p>

				</div>
				<div class="date">
					Posted <strong class="day">Sep 29, 2016</strong> at 
					<strong class="time">05:08</strong>
				</div>
			</div>
		
										
					<div class="update">
				
				<div class="entry">
					<h2>EtherScope in Action</h2>

<p>To better illustrate what EtherScope is doing, I've recorded a short video which shows how to get
the sources from GitHub, build the application and flash the image. Then I'm showing various analysis
supported by EtherScope, including SCP transfer and IPtv stream identification.</p>

<p><a href="https://youtu.be/zEtA-S5jvfY">EtherScope an Ethernet Traffic Monitor</a></p>

				</div>
				<div class="date">
					Posted <strong class="day">Sep 30, 2016</strong> at 
					<strong class="time">02:02</strong>
				</div>
			</div>
		
										
					<div class="update">
				
				<div class="entry">
					<h2>Ethernet Traffic Monitor on a STM32F746</h2>

<p>To explain what EtherScope really is, I wrote a small article that describes the project,
shows how to setup a network in order to use it and see EtherScope in action.  The article terminates by a
high level description of the internal architecture used for the project and proposes a number of future
protocol analysis.</p>

<p><a href="http://blog.vacs.fr/vacs/blogs/post.html?post=2016/09/30/Ethernet-Traffic-Monitor-on-a-STM32F746">Ethernet Traffic Monitor on a STM32F746</a></p>

				</div>
				<div class="date">
					Posted <strong class="day">Sep 30, 2016</strong> at 
					<strong class="time">02:08</strong>
				</div>
			</div>
		
										
					<div class="update">
				
				<div class="entry">
					<h1>Summary</h1>

<p>The EtherScope submission is made on two separate GitHub projects, one being
the application itself and the second being a re-usable library for other Open Source projects.
Both projects are under the Apache License version 2 allowing anybody to reuse these projects
in proprietary or open source situations.</p>

<ul>
<li><a href="https://github.com/stcarrez/etherscope">EtherScope</a></li>
<li><a href="https://github.com/stcarrez/ada-enet">Ada Embedded Network Stack</a></li>
</ul>

<p>The EtherScope contribution is using a number of Open Source tools:</p>

<ul>
<li>The GNAT ARM Ada compiler is used to build the project.</li>
<li>The Jenkins automated build is used to automatically enforce build rules. The build badge in the GitHub readme gives a live status of the build and allows to access the build system.</li>
<li>The EtherScope documentation is generated from the Ada 2012 source by using the <a href="https://github.com/stcarrez/dynamo">dynamo</a> project.</li>
</ul>

<p>The EtherScope and the Ethernet Driver are described in two blog articles.
Both article try to explain the features provided by the two projects, and it also explains
the design and some implementation consideration in order to help users to better
understand and be able to re-use them.  A 4 minutes video shows how to quickly build EtherScope and
see it in action through real case situations (scp copy running at 92 Mbps and a 12.4 Mbps IPtv HD flow).</p>

<ul>
<li><a href="http://blog.vacs.fr/vacs/blogs/post.html?post=2016/09/30/Ethernet-Traffic-Monitor-on-a-STM32F746">Ethernet Traffic Monitor on a STM32F746</a></li>
<li><a href="http://blog.vacs.fr/vacs/blogs/post.html?post=2016/09/29/Using-the-Ada-Embedded-Network-STM32-Ethernet-Driver">Using the Ada Embedded Network STM32 Ethernet Driver</a></li>
<li>Video: <a href="https://youtu.be/zEtA-S5jvfY">EtherScope an Ethernet Traffic Monitor</a></li>
</ul>

<p>The implementation is documented and serves as a basis for the documentation.  Several packages
contain documentation headers which are collected and merged by the <a href="https://github.com/stcarrez/dynamo">dynamo</a>
documentation generator. Therefore, the EtherScope documentation was generated from the sources
and then published on the GitHub wiki.</p>

<p>The implementation of the <a href="https://github.com/stcarrez/ada-enet">Ada Embedded Network Stack</a>
is using <code>pre</code> and <code>post</code> conditions on several operations (mostly the network buffer and the Ethernet
driver's interface).  Strong typing was used wherever it was possible and many types have been
declared limited to further avoid miss uses.  The two projects are not formally proven and SPARK
is not used (I must admit I have no experience in using SPARK nor in formally proving software).</p>

<p>The Ethernet driver design and implementation is probably something interesting to the Ada community.
It certifies that we can write low level drivers and control hardware using Ada 2012 language and
still get high performance.  The use of protected object for the implementation of such low level
driver is interesting and easier to understand (as compared for standard Linux/BSD kernel drivers in C).
The Ethernet driver as such is easier to understand than an equivalent driver written in C.
It is also, by design, a lot safer.</p>

<p>The protocol analysis is simple and it is quite easy to implement in Ada.  The language make it
easier to architect and understand (again, as compared to C).</p>

<p>The project will continue after the Make with Ada competition in the following directions:</p>

<ul>
<li>The Ada Embedded Network stack will be completed to have IPv4 support (there is some preliminary work but it is not finished).</li>
<li>The EtherScope protocol analyzer will be completed to recognize: DNS, DHCP, ARP and provide interesting reports (list of DNS queries, allocated DHCP IPs, unanswered DNS, DHCP or ARP requests).</li>
</ul>

				</div>
				<div class="date">
					Posted <strong class="day">Sep 30, 2016</strong> at 
					<strong class="time">04:31</strong>
				</div>
			</div>
		
										
		</div>
	
	
	
		
	<div class="widthController standard textCopy form">
					<div class="projectOverview">
	<h1>EtherScope</h1>
	
	<p><p>EtherScope is a monitoring tool that analyzes the Ethernet traffic.
It runs on a STM32F746 board, reads the Ethernet packets, do some
realtime analysis and displays the results on the 480x272 touch panel.</p>

<p>The EtherScope interface allows to filter the results at different
levels and report various kind of information.</p>
</p>
	
		
	<p class="projectAuthors"><span class="label">Project Lead</span> Stephane Carrez
									
																																													&nbsp;&nbsp;&nbsp;&nbsp;<span class="label">Location</span> Issy Les Moulineaux, France
		<br>
		
		<span class="label">Log Updates</span> 5
	</p>
	
</div>

<h3>Project Log</h3>


				<div class="update">
				
				<div class="entry">
					<p>EtherScope is a monitoring tool that analyzes the Ethernet traffic. It runs on a STM32F746 board, reads the Ethernet packets, do some realtime analysis and displays the results on the 480x272 touch panel.</p>

<p>The EtherScope interface allows to filter the results at different levels and report various kind of information.</p>

<p>The project is split in two parts:</p>

<h2>Ada Embedded Network Stack</h2>

<p>This library is a small network stack that implements ARP, IPv4 protocols
on top of an Ethernet driver.  It can be compiled for a STM32F746 board
to provide IPv4 network access to your project. The Ethernet driver manages
a transmit queue and a receive queue</p>

<p>Sources of this library are available in:  https://github.com/stcarrez/ada-enet</p>

<h2>EtherScope Application</h2>

<p>The EtherScope application has a first task that waits for network packets and do the analysis.</p>

<p>The main EtherScope task manages the display with the user's interaction through the touch panel.</p>

<p>Sources of the EtherScope application are available in: https://github.com/stcarrez/etherscope</p>

				</div>
				<div class="date">
					Posted <strong class="day">Sep 26, 2016</strong> at 
					<strong class="time">03:44</strong>
				</div>
			</div>
		
										
					<div class="update">
				
				<div class="entry">
					<h1>Ada STM32 Ethernet Driver</h1>

<p>At the heart of EtherScope is the Ethernet driver that reads packets from the network.
The Ethernet driver has a simple but very efficient design that allows to avoid memory copies on both
the transmit and receive side. The Ethernet driver has internally two protected objects for the management
of the transmit and receive queues.  The driver implementation has reached a very stable stage and is
able to sustain up to 95 Mbps of traffic, as analyzed by EtherScope.</p>

<p>The article below explains more into details how the driver works
<a href="http://blog.vacs.fr/vacs/blogs/post.html?post=2016/09/29/Using-the-Ada-Embedded-Network-STM32-Ethernet-Driver">Using the Ada Embedded Network STM32 Ethernet Driver</a></p>

				</div>
				<div class="date">
					Posted <strong class="day">Sep 29, 2016</strong> at 
					<strong class="time">05:08</strong>
				</div>
			</div>
		
										
					<div class="update">
				
				<div class="entry">
					<h2>EtherScope in Action</h2>

<p>To better illustrate what EtherScope is doing, I've recorded a short video which shows how to get
the sources from GitHub, build the application and flash the image. Then I'm showing various analysis
supported by EtherScope, including SCP transfer and IPtv stream identification.</p>

<p><a href="https://youtu.be/zEtA-S5jvfY">EtherScope an Ethernet Traffic Monitor</a></p>

				</div>
				<div class="date">
					Posted <strong class="day">Sep 30, 2016</strong> at 
					<strong class="time">02:02</strong>
				</div>
			</div>
		
										
					<div class="update">
				
				<div class="entry">
					<h2>Ethernet Traffic Monitor on a STM32F746</h2>

<p>To explain what EtherScope really is, I wrote a small article that describes the project,
shows how to setup a network in order to use it and see EtherScope in action.  The article terminates by a
high level description of the internal architecture used for the project and proposes a number of future
protocol analysis.</p>

<p><a href="http://blog.vacs.fr/vacs/blogs/post.html?post=2016/09/30/Ethernet-Traffic-Monitor-on-a-STM32F746">Ethernet Traffic Monitor on a STM32F746</a></p>

				</div>
				<div class="date">
					Posted <strong class="day">Sep 30, 2016</strong> at 
					<strong class="time">02:08</strong>
				</div>
			</div>
		
										
					<div class="update">
				
				<div class="entry">
					<h1>Summary</h1>

<p>The EtherScope submission is made on two separate GitHub projects, one being
the application itself and the second being a re-usable library for other Open Source projects.
Both projects are under the Apache License version 2 allowing anybody to reuse these projects
in proprietary or open source situations.</p>

<ul>
<li><a href="https://github.com/stcarrez/etherscope">EtherScope</a></li>
<li><a href="https://github.com/stcarrez/ada-enet">Ada Embedded Network Stack</a></li>
</ul>

<p>The EtherScope contribution is using a number of Open Source tools:</p>

<ul>
<li>The GNAT ARM Ada compiler is used to build the project.</li>
<li>The Jenkins automated build is used to automatically enforce build rules. The build badge in the GitHub readme gives a live status of the build and allows to access the build system.</li>
<li>The EtherScope documentation is generated from the Ada 2012 source by using the <a href="https://github.com/stcarrez/dynamo">dynamo</a> project.</li>
</ul>

<p>The EtherScope and the Ethernet Driver are described in two blog articles.
Both article try to explain the features provided by the two projects, and it also explains
the design and some implementation consideration in order to help users to better
understand and be able to re-use them.  A 4 minutes video shows how to quickly build EtherScope and
see it in action through real case situations (scp copy running at 92 Mbps and a 12.4 Mbps IPtv HD flow).</p>

<ul>
<li><a href="http://blog.vacs.fr/vacs/blogs/post.html?post=2016/09/30/Ethernet-Traffic-Monitor-on-a-STM32F746">Ethernet Traffic Monitor on a STM32F746</a></li>
<li><a href="http://blog.vacs.fr/vacs/blogs/post.html?post=2016/09/29/Using-the-Ada-Embedded-Network-STM32-Ethernet-Driver">Using the Ada Embedded Network STM32 Ethernet Driver</a></li>
<li>Video: <a href="https://youtu.be/zEtA-S5jvfY">EtherScope an Ethernet Traffic Monitor</a></li>
</ul>

<p>The implementation is documented and serves as a basis for the documentation.  Several packages
contain documentation headers which are collected and merged by the <a href="https://github.com/stcarrez/dynamo">dynamo</a>
documentation generator. Therefore, the EtherScope documentation was generated from the sources
and then published on the GitHub wiki.</p>

<p>The implementation of the <a href="https://github.com/stcarrez/ada-enet">Ada Embedded Network Stack</a>
is using <code>pre</code> and <code>post</code> conditions on several operations (mostly the network buffer and the Ethernet
driver's interface).  Strong typing was used wherever it was possible and many types have been
declared limited to further avoid miss uses.  The two projects are not formally proven and SPARK
is not used (I must admit I have no experience in using SPARK nor in formally proving software).</p>

<p>The Ethernet driver design and implementation is probably something interesting to the Ada community.
It certifies that we can write low level drivers and control hardware using Ada 2012 language and
still get high performance.  The use of protected object for the implementation of such low level
driver is interesting and easier to understand (as compared for standard Linux/BSD kernel drivers in C).
The Ethernet driver as such is easier to understand than an equivalent driver written in C.
It is also, by design, a lot safer.</p>

<p>The protocol analysis is simple and it is quite easy to implement in Ada.  The language make it
easier to architect and understand (again, as compared to C).</p>

<p>The project will continue after the Make with Ada competition in the following directions:</p>

<ul>
<li>The Ada Embedded Network stack will be completed to have IPv4 support (there is some preliminary work but it is not finished).</li>
<li>The EtherScope protocol analyzer will be completed to recognize: DNS, DHCP, ARP and provide interesting reports (list of DNS queries, allocated DHCP IPs, unanswered DNS, DHCP or ARP requests).</li>
</ul>

				</div>
				<div class="date">
					Posted <strong class="day">Sep 30, 2016</strong> at 
					<strong class="time">04:31</strong>
				</div>
			</div>
		
										
					
	</div>
	
	
        



<footer id="main-footer">
		<div class="widthController standard">
			<div class="corp_links">
				
		        <a href="/" >Overview</a>&nbsp;&nbsp;&nbsp;
		        <a href="/about" >About</a>&nbsp;&nbsp;&nbsp;
		        <a href="/getting-started" >Getting Started</a>&nbsp;&nbsp;&nbsp;
		        <a href="/judging" >Judging</a>&nbsp;&nbsp;&nbsp;
		        <a href="/faq" >FAQ</a>&nbsp;&nbsp;&nbsp;
		        <a href="/entries" >Entries</a>&nbsp;&nbsp;&nbsp;
		        <a href="/contact" >Contact</a>&nbsp;&nbsp;&nbsp;
		        <a href="/terms">Terms</a>&nbsp;&nbsp;&nbsp;
		        <a href="/resources">Resources</a>
		        <br><br>
		        

		        <span class="account">
		        					<a href="/register" >Register for the Competition</a>&nbsp;&nbsp;&nbsp;
					<a href="https://www.makewithada.org/login" >Login</a>
										        </span>

		        

			</div>
			
			<div class="baseline">
				
				Copyright &copy; 2014 AdaCore. All Rights Reserved &nbsp;&nbsp;&nbsp;
				
				<a href="https://twitter.com/adaprogrammers"><span class="ss-icon">twitter</span></a>

			</div>
		</div>
		
	</footer>
	

	<script>window.jQuery || document.write('<script src="/js/vendor/jquery-1.10.2.min.js"><\/script>')</script>
	<script src="/js/plugins.js"></script>
	<script src="/js/main.js"></script>
	
		<script>
		$( ".editPost" ).click(function() {
			$(this).parent(".controls").parent(".entry").children(".nonEdit").hide();
			
			return false;
		});
	</script>
	

	<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-117428-12', 'auto');
  ga('send', 'pageview');

</script>
     
    </body>
</html>
