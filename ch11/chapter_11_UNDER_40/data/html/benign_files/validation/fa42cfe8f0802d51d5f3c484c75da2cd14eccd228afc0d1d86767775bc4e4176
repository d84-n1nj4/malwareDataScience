<!DOCTYPE html>
<html lang="en-GB">
<head>
<meta charset="UTF-8" />
<title>Developer | matthew-jones.com</title>
<!-- Created by Artisteer v4.1.0.59861 -->
<meta name="viewport" content="initial-scale = 1.0, maximum-scale = 1.0, user-scalable = no, width = device-width">
<!--[if lt IE 9]><script src="https://html5shiv.googlecode.com/svn/trunk/html5.js"></script><![endif]-->

<link rel="stylesheet" href="http://matthew-jones.com/wp-content/themes/MJ_1/style.css" media="screen" />
<link rel="pingback" href="http://matthew-jones.com/xmlrpc.php" />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="matthew-jones.com &raquo; Feed" href="http://matthew-jones.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="matthew-jones.com &raquo; Comments Feed" href="http://matthew-jones.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="matthew-jones.com &raquo; Developer Category Feed" href="http://matthew-jones.com/category/developer/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.3\/svg\/","svgExt":".svg","source":{"concatemoji":"http:\/\/matthew-jones.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.9.2"}};
			!function(a,b,c){function d(a,b){var c=String.fromCharCode;l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,a),0,0);var d=k.toDataURL();l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,b),0,0);var e=k.toDataURL();return d===e}function e(a){var b;if(!l||!l.fillText)return!1;switch(l.textBaseline="top",l.font="600 32px Arial",a){case"flag":return!(b=d([55356,56826,55356,56819],[55356,56826,8203,55356,56819]))&&(b=d([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]),!b);case"emoji":return b=d([55358,56794,8205,9794,65039],[55358,56794,8203,9794,65039]),!b}return!1}function f(a){var c=b.createElement("script");c.src=a,c.defer=c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var g,h,i,j,k=b.createElement("canvas"),l=k.getContext&&k.getContext("2d");for(j=Array("flag","emoji"),c.supports={everything:!0,everythingExceptFlag:!0},i=0;i<j.length;i++)c.supports[j[i]]=e(j[i]),c.supports.everything=c.supports.everything&&c.supports[j[i]],"flag"!==j[i]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[j[i]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(h=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",h,!1),a.addEventListener("load",h,!1)):(a.attachEvent("onload",h),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),g=c.source||{},g.concatemoji?f(g.concatemoji):g.wpemoji&&g.twemoji&&(f(g.twemoji),f(g.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel='stylesheet' id='sdm-styles-css'  href='http://matthew-jones.com/wp-content/plugins/simple-download-monitor/css/sdm_wp_styles.css?ver=4.9.2' type='text/css' media='all' />
<!--[if lte IE 7]>
<link rel='stylesheet' id='style.ie7.css-css'  href='http://matthew-jones.com/wp-content/themes/MJ_1/style.ie7.css?ver=4.9.2' type='text/css' media='screen' />
<![endif]-->
<link rel='stylesheet' id='style.responsive.css-css'  href='http://matthew-jones.com/wp-content/themes/MJ_1/style.responsive.css?ver=4.9.2' type='text/css' media='all' />
<script type='text/javascript' src='http://matthew-jones.com/wp-content/themes/MJ_1/jquery.js?ver=4.9.2'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var sdm_ajax_script = {"ajaxurl":"http:\/\/matthew-jones.com\/wp-admin\/admin-ajax.php"};
/* ]]> */
</script>
<script type='text/javascript' src='http://matthew-jones.com/wp-content/plugins/simple-download-monitor/js/sdm_wp_scripts.js?ver=4.9.2'></script>
<script type='text/javascript' src='http://matthew-jones.com/wp-content/themes/MJ_1/script.js?ver=4.9.2'></script>
<script type='text/javascript' src='http://matthew-jones.com/wp-content/themes/MJ_1/script.responsive.js?ver=4.9.2'></script>
<link rel='https://api.w.org/' href='http://matthew-jones.com/wp-json/' />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://matthew-jones.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://matthew-jones.com/wp-includes/wlwmanifest.xml" /> 
<link rel="shortcut icon" href="http://matthew-jones.com/wp-content/themes/MJ_1/favicon.ico" />		<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>
		</head>
<body class="archive category category-developer category-2">

<div id="art-main">
    <div class="art-sheet clearfix">

<header class="art-header">


    <div class="art-shapes">

            </div>
		<div class="art-headline" data-left="1.23%">
    <a href="http://matthew-jones.com/">matthew-jones.com</a>
</div>
		<div class="art-slogan" data-left="1.45%">Ramblings from a developer</div>




                
                    
</header>

<nav class="art-nav">
    
<ul class="art-hmenu menu-21">
	<li class="menu-item-111"><a title="Blog" href="/">Blog</a>
	</li>
	<li class="menu-item-110"><a title="About" href="http://matthew-jones.com/about/">About</a>
	</li>
</ul>
 
    </nav>
<div class="art-layout-wrapper">
                <div class="art-content-layout">
                    <div class="art-content-layout-row">
                        <div class="art-layout-cell art-content">
							<article class="art-post art-article  breadcrumbs">
                                                                                                <div class="art-postcontent clearfix"><h4>Developer</h4><p>Developer related</p>
</div>


</article>
		<article id="post-123"  class="art-post art-article  post-123 post type-post status-publish format-standard hentry category-developer">
                                <div class="art-postmetadataheader"><h1 class="art-postheader"><span class="art-postheadericon"><a href="http://matthew-jones.com/thoughts-on-elevate-webbuilder-and-the-developer-requirements/" rel="bookmark" title="Thoughts on Elevate WebBuilder and the developer requirements">Thoughts on Elevate WebBuilder and the developer requirements</a></span></h1></div>                                                <div class="art-postheadericons art-metadata-icons"><span class="art-postdateicon"><span class="date">Published</span> <span class="entry-date" title="8:58 am">31st May 2013</span></span> | <span class="art-postauthoricon"><span class="author">By</span> <span class="author vcard"><a class="url fn n" href="http://matthew-jones.com/author/mjadmin16/" title="View all posts by MJ">MJ</a></span></span></div>                <div class="art-postcontent clearfix"><p>I&#8217;d just like to put together my thoughts on how well I think that <a href="http://www.elevatesoft.com/products?category=ewb">Elevate WebBuilder</a> (EWB) fits the requirements of many developers today, particularly Delphi developers. In the last year, I&#8217;ve done a lot of thinking about the tools I use, and what I need from them. What I think of course doesn&#8217;t apply to everyone, but it might help someone in their thinking.</p>
<p>The key for me was that mobile is here. A friend who moved from Delphi to .Net a long time ago had been telling me that the desktop is dead for most purposes, and given that I develop both my own products and for others, and I was doing desktop stuff, I knew it to be &#8220;wrong&#8221;, but it is also right of course &#8211; it is fading. You cannot develop for desktop alone. Apple&#8217;s iOS was for a long time the main target, with Android a second stage. Delphi recognised this too, and started targeting iOS. But while they floundered getting something sensible together, the world changed, and our customers are not just using iOS, and not only Android as a primary target too, but Windows phone and the web and anything you can think of. I was not happy with the way XE4 turned out, with language changes too. I like the single UI platform to target, and that wasn&#8217;t available in the <a href="http://www.remobjects.com/oxygene/">&#8220;pascal&#8221; language options</a>, nor <a href="http://xamarin.com/">C# offerings</a>. EWB came along at the right time for me, and I have been amazed at the close control it gives. I can easily respond to the screen size of the device that is running it (particularly with the new option coming in 1.02 (and <a href="http://www.elevatesoft.com/blog?action=view&amp;id=elevate_web_builder_102_released">now released</a>) that I&#8217;ve been hacking in recently myself). I&#8217;ve been listening to the Tablet Show podcast recently, and I am a fan of the &#8220;application theme&#8221; rather than &#8220;device style&#8221;, given that our application is going to be used across multiple devices. EWB does this nicely &#8211; making my own theme to style our application has been easy.</p>
<p> <a href="http://matthew-jones.com/thoughts-on-elevate-webbuilder-and-the-developer-requirements/#more-123" class="more-link">Continue reading <span class="meta-nav">&rarr;</span></a></p>
</div>


</article>
		<article id="post-105"  class="art-post art-article  post-105 post type-post status-publish format-standard hentry category-developer">
                                <div class="art-postmetadataheader"><h1 class="art-postheader"><span class="art-postheadericon"><a href="http://matthew-jones.com/wix-msi-factory-and-finalbuilder/" rel="bookmark" title="WiX, MSI Factory, and FinalBuilder">WiX, MSI Factory, and FinalBuilder</a></span></h1></div>                                                <div class="art-postheadericons art-metadata-icons"><span class="art-postdateicon"><span class="date">Published</span> <span class="entry-date" title="1:27 pm">25th March 2011</span></span> | <span class="art-postauthoricon"><span class="author">By</span> <span class="author vcard"><a class="url fn n" href="http://matthew-jones.com/author/mjadmin16/" title="View all posts by MJ">MJ</a></span></span></div>                <div class="art-postcontent clearfix"><p>For some time now, I&#8217;ve struggled to work out how to build the WiX files that are generated by <a href="http://www.indigorose.com/products/msi-factory/" target="_blank">MSI Factory</a> in <a href="http://www.finalbuilder.com/" target="_blank">FinalBuilder </a><strong>and include the bootstrapper</strong>. Building WiX files in FinalBuilder is dead easy &#8211; it has actions for the WiX Candle and the WiX linker so you can compile the files that MSI Factory generates (or any other WiX files of course) quite easily. But once you have your MSI, it is nice to have the EXE wrapper for bootstrapping it. Why does this matter? Because if you issue an update to your MSI file, and then double-click to run it, Windows will tell the user they must manually uninstall the app before they can install the update. Not so friendly.</p>
<p>Okay, so what&#8217;s so hard? The bootstrap compiler takes a number of options, and they include the GUIDs that are needed to check if it is installed already. The problem is that you don&#8217;t know the GUID in the build. It turns out that the answer is simple, but it took some time to find, so I&#8217;m blogging it so I remember for next time.</p>
<p>The MSI Factory software comes with a command line tool called &#8220;IRMakeBootstrap.exe&#8221;. This takes an XML configuration file and the name of the output file as parameters, and the product name, but also then needs three parameters that are key to proper operation.</p>
<p>The key ones are -var:PackageCode and -var:ProductCode. Now if you look at your WiX file you will see that it has a line like:</p>
<pre>&lt;Product Id="D03192D5-40A2-4EAC-B1A1-9BACE96AFE78" Name="My App Name" Version="1.0.0" Manufacturer="My Company" UpgradeCode="76D9BEB2-C077-4B7C-A91E-DF294F4C3457" Language="1033"&gt;</pre>
<p>The &#8220;Id&#8221; matches the &#8220;Product Code&#8221; , and the &#8220;UpgradeCode&#8221; matches the Upgrade code, in the Project settings dialog of MSI Factory. However, the PackageCode is not in the file at all. There is a Package node in the XML, but no value. If you look in MSI Factories dialog, there is a &#8220;Package ID&#8221; on the Package tab, but it says &#8220;leave blank to auto-generate&#8221;. But if that is left blank, I can&#8217;t find out what it is to set it to something useful, and thus pass to the bootstrap maker.</p>
<p>Okay, so what is the solution? Simple. Define a GUID in the dialog for the Package ID in the MSI Factory dialog. This is normally a &#8220;bad thing&#8221;, because you want to to change each time (pretty much essential). But you are doing better anyway by using FinalBuilder (or other build tool?) and FinalBuilder is able to generate a GUID just fine. So, set it to a valid GUID string, and then generate the WiX files.</p>
<pre>&lt;Package Id="59D9FCDF-13BE-4AD7-841B-1F11D2E74500" ...
</pre>
<p>You will now find that the XML contains an &#8220;Id&#8221; for the package too. Haha! Now you have what you need to automate it. The value in the XML can now be replaced in your script, and also passed through to the bootstrap builder. Note that the GUIDs passed to the bootstrap builder need the curly brackets surrounding them. This ensures that they match properly.</p>
<p>Finally, you can check that it all works properly by running your install EXE with the &#8220;/Log:c:\install.txt&#8221; parameter which causes it to output a log of its activities.</p>
<p>The final parameters for  the bootstrap maker is:</p>
<p>&nbsp;</p>
<pre>"D:\Src\bootstrap_config.xml" "D:\Src\MySetup.exe" -var:AllowExtractMSI=1 -var:ProductName="Product Name"  -var:PackageCode="{%INST_PACKAGECODE%}"  -var:ProductCode="{%INST_PRODUCTCODE%}" -var:ProductVersion=%VERSION_MAJOR%.%VERSION_MINOR%.%VERSION_BUILD%</pre>
</div>


</article>
		<article id="post-25"  class="art-post art-article  post-25 post type-post status-publish format-standard hentry category-developer tag-code-signing">
                                <div class="art-postmetadataheader"><h1 class="art-postheader"><span class="art-postheadericon"><a href="http://matthew-jones.com/getting-code-signed/" rel="bookmark" title="Getting code signed">Getting code signed</a></span></h1></div>                                                <div class="art-postheadericons art-metadata-icons"><span class="art-postdateicon"><span class="date">Published</span> <span class="entry-date" title="7:54 pm">1st November 2006</span></span> | <span class="art-postauthoricon"><span class="author">By</span> <span class="author vcard"><a class="url fn n" href="http://matthew-jones.com/author/mjadmin16/" title="View all posts by MJ">MJ</a></span></span></div>                <div class="art-postcontent clearfix"><p>Something that has bothered me for a while is the hassle in putting together all the pieces to sign my download files. I finally got around to looking it all up, and it isn&#8217;t easy as you have to piece all the things together. I hope that this will give you an insight into how it can really work, since I managed to actually achieve what I wanted and sign my code. This article is a list of the steps I had to take, and you will probably need to review the commands yourself if you have problems.</p>
<table border="0" width="100%" bgcolor="#ccffff">
<tbody>
<tr>
<td>
<h1>Update 2006:</h1>
<p>How things change. Since I wrote this original article, things in             the codesigning world have become a lot easier. I&#8217;ve even renewed             the two year certificate I bought &#8211; but watch out that you get the             renewal from the expiry of the first one or you could lose many days!</p>
<p>The main change though is that Microsoft made the signcode executable             very hard to find, if not impossible. The good news is that there             is a much better option available and, although it isn&#8217;t free, it             is more comprehensive and offers a GUI mode for your initial testing             and a command line option (signcode compatible) for your development             script. The best improvement is that you can specify the password             for the certificate, which means you don&#8217;t have to have the password             dialog pop up all the time. Full details, and links to certificate             suppliers and a step-by-step guide are available from the <span style="font-family: Arial; font-size: x-small;"><a href="http://www.x2net.com/signcode/index.htm" target="_blank">X2Net             SignCode</a></span> web page.</p>
<p>I&#8217;ve left the original article below as it is still a good summary             of the tools that might be useful to people, and how to transform           things.</td>
</tr>
</tbody>
</table>
<h2>The process</h2>
<p>Get a certificate from http://www.ascertia.com/onlineCA/Issuer/CerIssue.aspx who will do a free code signing certificate. Obviously any alternative is good, but this will prove the concept for you, and you can go buy another from them or elsewhere later. The email address is included in the certificate, so use a sensible one you are happy for the world to see. Accept the installation of the certificate into the browser as it won&#8217;t be emailed even though they say it will. Make sure you chose exportable.</p>
<p>Then get the Microsoft code signing stuff (codesigningx86.exe) from the MSDN web site (google will find its current location).</p>
<p>Use the certmgr to view your certificate and export it. Export it as a certificate (.cer file), and with the key (.pvk) file.</p>
<p>Use cert2spc to convert the cer file into an spc file. That&#8217;s the first half of the process done. Now you need a key file compatible with the signcode application.</p>
<p>From http://support.globalsign.net/en/objectsign/transform.cfm:</p>
<table border="0" cellpadding="5" width="100%" bgcolor="#ffffcc">
<tbody>
<tr>
<td>How to transform your certificate to a pvk + spc combination.</p>
<p>Export your certificate to a pfx file <strong>(be sure             to check &#8220;Include all certificates in the certification path             if possible&#8221;)</strong>. (The latter will help ensure it is accepted             by more systems.</p>
<p>Install openssl. You can find compiled binaries on www.openssl.org (but get the Windows build from http://www.shininglightpro.com/ http://www.shininglightpro.com/download/Win32OpenSSL-v0.9.7d.exe)</p>
<p>Extract your private key from the pfx file.</p>
<p>-&gt;openssl pkcs12 -in &lt;pfx-file&gt; -nocerts -nodes -out &lt;pem-key-file&gt;</p>
<p>The pfx password will be asked.</p>
<p>Download the pvk transform utility. This file can be found at http://support.globalsign.net/en/objectsign/PVK.zip.</p>
<p>-&gt; pvk -in &lt;pem-key-file&gt; -topvk -out &lt;pvk-file&gt;</p>
<p>Extract your certificates from the pfx file.</p>
<p>openssl pkcs12 -in &lt;pfx-file&gt; -nokeys -out &lt;pem-certs-file&gt;</p>
<p>The pfx password will be asked.</p>
<p>Transform your pem file to a spc file</p>
<p>-&gt;openssl crl2pkcs7 -nocrl -certfile &lt;pem-certs-file&gt; -outform DER -out &lt;spc-file&gt;</td>
</tr>
</tbody>
</table>
<p>I didn&#8217;t do that last bit &#8211; already did that stage. Note that you are transforming into a PEM file as an intermediate step. I got that bit wrong first time round.</p>
<p>Okay, so now you have all the right bits. You now can just run signcode.exe and use the wizard to check it all works. Select the advanced mode so you can use files, and all should go well. You&#8217;ll have to enter the password at various points. If it all worked, then we are nearly there.</p>
<p>To actually sign the code, and I used <a href="http://www.atozedsoftware.com/finalbuilder/">FinalBuilder</a> to make sure it is done each time and every time reliably, you need the following command.</p>
<table border="0" cellpadding="5" width="100%" bgcolor="#ffffcc">
<tbody>
<tr>
<td>c:\codesigning\signcode -spc &#8220;c:\codesigning\myAscertiaSPC.spc&#8221; -v &#8220;c:\codesigning\myascertiakey.pvk&#8221; -a md5 -i &#8220;www.yourdomain.com&#8221; -n &#8220;Application install file&#8221; &#8220;C:\Build\Installer\yourinstaller.exe&#8221;</td>
</tr>
</tbody>
</table>
<p>If it fails, then you probably got a path wrong or a missing file or something silly. Took me ages to spot that I&#8217;d got an extra letter in a path. Grr.</p>
<p>The only fly in the ointment is that you need to type the password for each file. It&#8217;s not hard to write an app to do the typing for you, but the security of your password is obviously at risk.</p>
<p>An update: Thanks to Hugo Logmans who also provided the script additions to allow <a href="http://www.atozedsoftware.com/finalbuilder/">FinalBuilder</a> to check that it worked okay, which ensures that you don&#8217;t think you signed it.</p>
<table border="0" cellpadding="5" width="100%" bgcolor="#ffffcc">
<tbody>
<tr>
<td>BeforeAction:<br />
CodeSignFailure = true</p>
<p>AfterAction:<br />
ActionResult = NOT CodeSignFailure<br />
Continue = NOT CodeSignFailure</p>
<p>OnStatusMessage:<br />
if InStr(StatusMessage.MessageText,&#8221;Succeeded&#8221;) &gt; 0 then<br />
CodeSignFailure = false<br />
end if</p>
<p>I have this script to sign the program executable AND singlefile<br />
installer-executables. Works very fast and efficient. This way you can be sure the file is always signed.</td>
</tr>
</tbody>
</table>
<p>Update: After some issues that someone identified with the ascertia certificate       on their machine (which I couldn&#8217;t replicate), I bought a two year certificate       from <a href="http://www.instantssl.com/code-signing/">http://www.instantssl.com/code-signing/</a> which       is from a fairly new certificate authority, but is cheap therefore and       is in the XP SP2 root certificates and thus answers the issues.</p>
<p>Update: The codesign executable is a moving target, and is becoming harder       to find. So forget the Microsoft codesign executable, and use one that       is much easier to use and not only command line compatible but more comprehensive.       Give <span style="font-family: Arial; font-size: x-small;"><a href="http://www.x2net.com/signcode/index.htm" target="_blank">X2Net SignCode</a></span> a whirl &#8211; both GUI and       command line options available.</p>
<p><em>Matthew Jones</em></p>
</div>


</article>
				

                        </div>
                        

<div class="art-layout-cell art-sidebar1"><div  id="categories-2" class="art-block widget widget_categories  clearfix">
        <div class="art-blockheader">
            <div class="t">Categories</div>
        </div><div class="art-blockcontent">		<ul>
	<li class="cat-item cat-item-2 current-cat"><a href="http://matthew-jones.com/category/developer/" title="Developer related">Developer</a>
</li>
	<li class="cat-item cat-item-3"><a href="http://matthew-jones.com/category/downloads/" >Downloads</a>
</li>
	<li class="cat-item cat-item-4"><a href="http://matthew-jones.com/category/general/" >General</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://matthew-jones.com/category/ideas/" >Ideas</a>
</li>
	<li class="cat-item cat-item-6"><a href="http://matthew-jones.com/category/off-topic/" >Off-topic</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://matthew-jones.com/category/reviews/" title="Reviews">Reviews</a>
</li>
		</ul>
</div>
</div><div  id="search-2" class="art-block widget widget_search  clearfix">
        <div class="art-blockcontent"><form class="art-search" method="get" name="searchform" action="http://matthew-jones.com/">
	<input name="s" type="text" value="" />
	<input class="art-search-button" type="submit" value="" />
</form></div>
</div><div  id="recent-posts-2" class="art-block widget widget_recent_entries  clearfix">
        <div class="art-blockheader">
            <div class="t">Recent Posts</div>
        </div><div class="art-blockcontent">						<ul>
											<li>
					<a href="http://matthew-jones.com/openssl-update-distributor/">OpenSSL update distributor</a>
									</li>
											<li>
					<a href="http://matthew-jones.com/ewb-rosdk-getting-started/">Elevate WebBuilder and RemObjects &#8211; getting started</a>
									</li>
											<li>
					<a href="http://matthew-jones.com/making-a-prettier-grid-in-elevate-webbuilder/">Making a prettier grid in Elevate WebBuilder</a>
									</li>
											<li>
					<a href="http://matthew-jones.com/why-do-i-use-remobjects/">Why do I use RemObjects?</a>
									</li>
											<li>
					<a href="http://matthew-jones.com/pebble-watch/">Pebble watch</a>
									</li>
					</ul>
		</div>
</div><div  id="meta-2" class="art-block widget widget_meta  clearfix">
        <div class="art-blockheader">
            <div class="t">Meta</div>
        </div><div class="art-blockcontent">			<ul>
						<li><a href="http://matthew-jones.com/wp-login.php">Log in</a></li>
			<li><a href="http://matthew-jones.com/feed/">Entries <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="http://matthew-jones.com/comments/feed/">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="https://wordpress.org/" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.org</a></li>			</ul>
			</div>
</div></div>
                    </div>
                </div>
            </div><footer class="art-footer"><div class="art-footer-text">

<p>Copyright © 1998 - 2013. All Rights Reserved.</p>


</div>
</footer>

    </div>
</div>



<div id="wp-footer">
	<script type='text/javascript' src='http://matthew-jones.com/wp-includes/js/wp-embed.min.js?ver=4.9.2'></script>
	<!-- 33 queries. 1.742 seconds. -->
</div>
</body>
</html>


<!-- Dynamic page generated in 1.723 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2018-02-01 22:32:08 -->

<!-- Compression = gzip -->