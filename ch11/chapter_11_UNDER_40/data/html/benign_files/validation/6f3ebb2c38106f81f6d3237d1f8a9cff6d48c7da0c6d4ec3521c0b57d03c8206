<!DOCTYPE HTML>
<html>
 <head>
  
  <title>Home - Feature Flipping 4 JAVA</title>
  <meta http-equiv="content-type" 	content="text/html; charset=utf-8" />
  <meta name="description" 			content="FF4J, Feature flipping for Java mode Easy" />
  <meta name="keywords" 			content="feature,features,toggle,flipping,ff4j,java," />
 
  <!--[if lte IE 8]><script src="js/html5shiv.js"></script><link rel="stylesheet" href="css/ie8.css" /><![endif]-->
  <script src="js/jquery.min.js"></script>
  <script src="js/jquery.dropotron.min.js"></script>
  <script src="js/config.js"></script>
  <script src="js/skel.min.js"></script>
  <script src="js/skel-panels.min.js"></script>
  <script src="js/prettify.min.js"></script>
  <script src="js/site.js"></script>
  
  <noscript>
	<link rel="stylesheet" href="css/skel-noscript.css" />
	<link rel="stylesheet" href="css/google.css" />
	<link rel="stylesheet" href="css/style.css" />
	<link rel="stylesheet" href="css/style-desktop.css" />
  </noscript>
  
</head>

<body class="homepage">
  <!-- Header Wrapper -->
  <div id="header-wrapper" class="wrapper" style="height:400px">	
    <div class="container">
	  <div class="row">
	    <div class="12u">

		<!-- Donate -->
		<div style="position:absolute;top:20px;left:80px">
		 <form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
		  <input type="hidden" name="cmd" value="_s-xclick">
		  <input type="hidden" name="hosted_button_id" value="XD2BQ9KDJ7SGU">
		  <input type="image" src="https://www.paypalobjects.com/en_GB/i/btn/btn_donate_LG.gif" 
		  border="0" name="submit" alt="PayPal â€“ The safer, easier way to pay online.">
		  <img alt="" border="0" src="https://www.paypalobjects.com/fr_FR/i/scr/pixel.gif" width="1" height="1">
		 </form>
		</div>
		
		<!-- Header -->
		<div id="header">
		 
		 <!-- Logo -->
		 <div id="logo"  style="top:50px">
		  <h1><img src="images/ff4j.png" /></h1>
		  <span class="byline" style="margin-top:-45px">Feature Flags for Java made Easy</span>
		 </div>
		 <!-- /Logo -->

		 <!-- Navigation Bar -->
		 <nav id="nav" style="margin-top:190px;">
		  <ul>
			<li><a href="http://sample-env.wgtzd252cy.eu-west-1.elasticbeanstalk.com" class="fa fa-desktop">&nbsp;Live Demo</a>
			<li><a href="#10min" class="fa fa-bookmark">&nbsp;Getting Started</a>
			<li><span class="fa fa-book">&nbsp;DOCUMENTATION</span>
		  <ul>
		    <li><a href="https://github.com/clun/ff4j/wiki" class="fa fa-book"> Reference Guide</span>
			<li><a href="http://github.com/clun/ff4j" class="fa fa-github"> Github </a></li>
			<li><a href="https://groups.google.com/forum/?hl=fr#!forum/ff4j" class="fa fa-envelope"> Support</a></li>
			<li><span class="fa fa-info">&nbsp; JavaDocs</span>
			 <ul>
			  <li><a href="http://ff4j.org/javadocs/1.6/" class="fa fa-book" > 1.6</a></li>
			 </ul>
			</li>
		  </ul>
		<li><a href="https://github.com/clun/ff4j-samples" class="fa fa-code"> &nbsp;Sample Codes</a></li>
		</ul>
		</nav>
       </div>
	  </div>
	 </div>
	</div>
   </div>
   <!-- /Header Wrapper -->
  
	<!-- Intro Wrapper -->
	<div id="intro-wrapper" class="wrapper wrapper-style3">
		<div class="title">Features</div>
		<div class="container" style="padding:0px;margin-top:-20px;">
		 
			<div class="row" >
				<div class="12u" style="margin-top:-30px">

					<!-- Features -->
					<section id="features" >
			<div class="feature-list">
								<div>
 <div class="row">
  
  <div class="6u">
  <section>
   <h3 class="fa fa-check">Feature Toggle</h3>
    <p style="margin-left:-10px;text-align:justify">
	 Also called features flag, it allows to enable/disable features at runtime without deployment. During developments you
     implement multiple behaviours in your code. At runtime, the executed one is selected by evaluating conditions.
	 <br/><br/>
	 <center>
	 <a class="gallerypic" href="images/feature_01_featuretoggle.png" target="_blank" />
		<img src="images/feature_01_featuretoggle.png" width="350px" height="220px" style="border:1px solid #AAAAAA;margin-left:-5px;"/>
		<span class="zoom-icon">
         <img src="images/gallery.png" width="64" height="64" alt="Zoom">
        </span>
     </a>
	</center>
	</p>
  </section>
 </div>
 
 <div class="6u">
  <section>
   <h3 class="fa fa-user">Role-based Toggling</h3>
    <p style="margin-left:-10px;text-align:justify">
	 Grant features based on roles and groups. Sometimes called <i>Canary Release</i> it allows to 
	 tests new features without involving everyone. Different security frameworks can be used like 
	 Apache Chiro or Spring Security.
	 <br/><br/>
	 <center>
	 <a class="gallerypic" href="images/feature_02_permissions.png" target="_blank" />
		<img src="images/feature_02_permissions.png" width="350px" height="220px" style="border:1px solid #AAAAAA;margin-left:-5px;"/>
		<span class="zoom-icon">
         <img src="images/gallery.png" width="64" height="64" alt="Zoom">
        </span>
     </a>
	</center>
	</p>
  </section>
 </div>

 </div><div class="row">
 
 <div class="6u">
  <section>
   <h3 class="fa fa-code-fork">Strategy-based Toggling</h3>
    <p style="margin-left:-10px;text-align:justify">
	 Implement your custom predicates to evaluate if a feature is enabled. There are some provided out of the box like <i>White lists</i>, 
	 <i>Black List</i>, <i>Office Hours</i>, <i>Expression based</i>. A bridge is also provided to rely on real Rules Engine like Drools.
	 <br/><br/>
	 <center>
	 <a class="gallerypic" href="images/feature_03_strategy.png" target="_blank" />
		<img src="images/feature_03_strategy.png" width="350px" height="220px" style="border:1px solid #AAAAAA;margin-left:-5px;"/>
		<span class="zoom-icon">
         <img src="images/gallery.png" width="64" height="64" alt="Zoom">
        </span>
     </a>
	</center>
	</p>
  </section>
 </div>

 <div class="6u">
  <section>
   <h3 class="fa fa-code">AOP-driven Toggling</h3>
    <p style="margin-left:-10px;text-align:justify">
	 Avoid nested <i>if</i> statements in your source code, instead decorate your code with
	 annotations. A dynamic proxy will pick up correct implementation at runtime based on feature status. 
	 It improves readability and maintainability.
	<br/><br/>
	 <center>
	 <a class="gallerypic" href="images/feature_04_aop.png" target="_blank" />
		<img src="images/feature_04_aop.png" width="350px" height="220px" style="border:1px solid #AAAAAA;margin-left:-5px;"/>
		<span class="zoom-icon">
         <img src="images/gallery.png" width="64" height="64" alt="Zoom">
        </span>
     </a>
	</center>
	</p>
  </section>
 </div> 
 
 </div><div class="row">
 
 <div class="6u">
  <section>
   <h3 class="fa fa-signal">Features Monitoring</h3>
    <p style="margin-left:-10px;text-align:justify">
	 As a dispatcher for features we are able to record all features usage (hits) and compute metrics based on 
	 different KPI like users, sources or hosts. Dashboards allow to search and filter in history.
	<br/><br/>
	 <center>
	 <a class="gallerypic" href="images/feature_06_monitoring.png" target="_blank" />
		<img src="images/feature_06_monitoring.png" width="350px" height="220px" style="border:1px solid #AAAAAA;margin-left:-5px;"/>
		<span class="zoom-icon">
         <img src="images/gallery.png" width="64" height="64" alt="Zoom">
        </span>
     </a>
	</center>
	</p>
  </section>
 </div> 
 
 <div class="6u">
  <section>
   <h3 class="fa fa-reorder">Features Auditing</h3>
    <p style="margin-left:-10px;text-align:justify">
	 Save operations performed on both features and properties (CRUD) in order to troubleshoot and provide auditability.
	 With permissions management enabled it's possible to identify each user operation.
	<br/><br/>
	 <center>
	 <a class="gallerypic" href="images/feature_05_audit.png" target="_blank" />
		<img src="images/feature_05_audit_mini.png" width="350px" height="220px" style="border:1px solid #AAAAAA;margin-left:-5px;"/>
		<span class="zoom-icon">
         <img src="images/gallery.png" width="64" height="64" alt="Zoom">
        </span>
     </a>
	</center>
	</p>
  </section>
 </div> 
 
 </div><div class="row">
 
 <div class="6u">
  <section>
   <h3 class="fa fa-desktop">Web Console</h3>
    <p style="margin-left:-10px;text-align:justify">
	 Perform administrations operations through nice i18n web console: features, caching, properties but also audit or settings.
	 Packaged as a servlet it meant to be embedded in your applications.
	 
	 <br/><br/>
	 <center>
	 <a class="gallerypic" href="images/feature_07_webconsole.png" target="_blank" />
		<img src="images/feature_07_webconsole.png" width="350px" height="220px" style="border:1px solid #AAAAAA;margin-left:-5px;"/>
		<span class="zoom-icon">
         <img src="images/gallery.png" width="64" height="64" alt="Zoom">
        </span>
     </a>
	</center>
	</p>
  </section>
 </div>
 
 <div class="6u">
  <section>
   <h3 class="fa fa-save">Support many databases</h3>
    <p style="margin-left:-10px;text-align:justify">
	 Persist Features, Properties or Audit events in a dozen of databases technologies. From RDBMS, to caches (redis, jsr107, hazelcast...)
	 with main NoSQL players (Cassandra, Mongo, Elastic, Neo4j)
	 
	 <br/><br/>
	 <center>
	 <a class="gallerypic" href="images/feature_08_technos.png" target="_blank" />
		<img src="images/feature_08_technos.png" width="350px" height="220px" style="border:1px solid #AAAAAA;margin-left:-5px;"/>
		<span class="zoom-icon">
         <img src="images/gallery.png" width="64" height="64" alt="Zoom">
        </span>
     </a>
	</center>
	</p>
  </section>
 </div>
 
 </div><div class="row">
 
 <div class="6u">
  <section>
 
 <h3 class="fa fa-chevron-right">Command Line Interface</h3>
    <p style="margin-left:-10px;text-align:justify">
	 Not all applications provides web interfaces. In production, you will probably work with SSH. 
	 Command line is very convenient for scripting and automation. Because 60% of devops guys are ops here is the CLI.
	 <br/><br/>
	 <center>
	 <a class="gallerypic" href="images/feature_09_cli.png" target="_blank" />
		<img src="images/feature_09_cli.png" width="350px" height="220px" style="border:1px solid #AAAAAA;margin-left:-5px;"/>
		<span class="zoom-icon">
         <img src="images/gallery.png" width="64" height="64" alt="Zoom">
        </span>
     </a>
	</center>
	</p>
  </section>
 </div>
 
 <div class="6u">
  <section>
   <h3 class="fa fa-cogs">JMX</h3>
    <p style="margin-left:-10px;text-align:justify">
	 Treatments like batches cannot use web UI nor CLI. MBeans are provided to operate through JMX. Tools like Java Visual VM to operate. 
	 It is also the opportunity to plug supervision tools like Nagios.
	 <br/><br/>
	 <center>
	 <a class="gallerypic" href="images/feature_10_jmx.png" target="_blank" />
		<img src="images/feature_10_jmx.png" width="350px" height="220px" style="border:1px solid #AAAAAA;margin-left:-5px;"/>
		<span class="zoom-icon">
         <img src="images/gallery.png" width="64" height="64" alt="Zoom">
        </span>
     </a>
	</center>
	</p>
  </section>
 </div>
 
 </div><div class="row">
 <div class="6u">
  <section>
   <h3 class="fa fa-cogs">Configuration Management</h3>
    <p style="margin-left:-10px;text-align:justify">
	 DB used for features states are good candidate to externalize configuration and store any properties.
	 Inject properties and edit values at runtime. Integrated with Spring, Archaius and
	 commons-config or Consul.
	 <br/><br/>
	 <center>
	 <a class="gallerypic" href="images/feature_11_properties.png" target="_blank" />
		<img src="images/feature_11_properties.png" width="350px" height="220px" style="border:1px solid #AAAAAA;margin-left:-5px;"/>
		<span class="zoom-icon">
         <img src="images/gallery.png" width="64" height="64" alt="Zoom">
        </span>
     </a>
	</center>
	</p>
  </section>
 </div>
 
 
 <div class="6u">
  <section>
   <h3 class="fa fa-inbox">Caching</h3>
    <p style="margin-left:-10px;text-align:justify">
	 To resolve feature state you have to hit DB but some storage are slow. Leverage on caching (near or distributed) 
	 to speed up applications. Most Cache solutions implemented like EhCache, Hazelcat, Redis or Ignite.
	 <br/><br/>
	 <center>
	 <a class="gallerypic" href="images/feature_12_caching.png" target="_blank" />
		<img src="images/feature_12_caching.png" width="350px" height="220px" style="border:1px solid #AAAAAA;margin-left:-5px;"/>
		<span class="zoom-icon">
         <img src="images/gallery.png" width="64" height="64" alt="Zoom">
        </span>
     </a>
	</center>
	</p>
  </section>
 </div>
 
 </div><div class="row">
 
 <div class="6u">
  <section>
   <h3 class="fa fa-leaf">Spring Boot Starter</h3>
    <p style="margin-left:-10px;text-align:justify">
	 Resolve all dependencies by using provided spring-boot-starter library. Very useful in microservices 
	 as handle distributed configuration, service registry (consul) and feature toggle of course.
	 <br/><br/>
	 <center>
	 <a class="gallerypic" href="images/feature_13_springb.png" target="_blank" />
		<img src="images/feature_13_springb.png" width="350px" height="220px" style="border:1px solid #AAAAAA;margin-left:-5px;"/>
		<span class="zoom-icon">
         <img src="images/gallery.png" width="64" height="64" alt="Zoom">
        </span>
     </a>
	</center>
	</p>
  </section>
 </div>
 
 <div class="6u">
  <section>
   <h3 class="fa fa-link">REST Api</h3>
    <p style="margin-left:-10px;text-align:justify">
	 Feature toggle is meant to be implemented in any application layer including UI. Use FF4j with any technologies by integrated
	 the provided rest API. As for web console it's a single servlet to declare.
	 <br/><br/>
	 <center>
	 <a class="gallerypic" href="http://ff4j.org/rest-api" target="_blank" />
		<img src="images/console-restapi.png" width="350px" height="220px" style="border:1px solid #AAAAAA;margin-left:-5px;"/>
		<span class="zoom-icon">
         <img src="images/gallery.png" width="64" height="64" alt="Zoom">
        </span>
     </a>
	</center>
	</p>
  </section>
 </div>
 
						</section>
						<!-- /Features -->

				</div>
			</div>
		</div>
	</div>
	<!-- /Intro Wrapper -->

	<!-- Main Wrapper -->
	<div class="wrapper wrapper-style2">
		<div class="title">Getting Started </div>
		<div class="container">
			<div class="row">
				<div class="12u">
				
						<!-- Features -->
						<section id="features" style="margin-top:-100px">
							
							<p style="color:#AAA"><a name="10min"></a><br/><h2>Hello World !</h2>	</p>
							<div class="prettyprint linenums">
In this section we will create a sample from scratch, skip first steps if you already have a working project.
First, create a simple web project with dedicated maven archetype.  We could have chosen a basic archetype 
but we could like to show you the web console.
<br/><br/><pre style="font-family:courier new;font-size:13px">mvn archetype:generate -DarchetypeArtifactId=maven-archetype-webapp \
	               -Dversion=1.0 -DartifactId=hello-ff4j -DgroupId=org.ff4j.hello</pre></div>
			
<div class="prettyprint linenums">
<p><br/>Import the project in your favorite IDE, open your pom.xml file and add the following dependencies. JUNIT should already be 
provided but with a quite old version.</p> 
<pre style="font-family:courier new;font-size:13px">&lt;dependency&gt;
 &lt;groupId&gt;org.ff4j&lt;/groupId&gt;
 &lt;artifactId&gt;ff4j-core&lt;/artifactId&gt;
 &lt;version&gt;1.3.0&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
 &lt;groupId&gt;junit&lt;/groupId&gt;
 &lt;artifactId&gt;junit&lt;/artifactId&gt;
 &lt;scope&gt;test&lt;/scope&gt;
 &lt;version&gt;4.11&lt;/version&gt;
&lt;/dependency&gt;	  
</pre></div>

 <p><br/>If required, the maven project folders (src/main/java, src/test/java....). In the folder <span class="source-code">src/test/resources</span>, 
 create the following <span class="source-code">ff4j.xml</span> file. We
 should have put you a single feature but let's illustrate immediately some great capabilities.
 <div class="prettyprint linenums">
<pre style="font-family:courier new;font-size:13px">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;features xmlns="http://ff4j.org/schema" 
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://ff4j.org/schema http://ff4j.org/schema/ff4j-1.2.0.xsd"&gt;

  &lt;!-- Will be "ON" if enable is set as true -->
  &lt;feature uid=&quot;hello&quot; enable=&quot;true&quot;  description="This is my firts feature" /&gt;
 
  &lt;!-- Will be "ON" only if :
   (1) Enable is set as true
   (2) A security provider is defined  
   (3) The current logged user has the correct permissions. --&gt;
  &lt;feature uid=&quot;mySecuredFeature&quot; enable=&quot;true&quot; &gt;
    &lt;security&gt;
	&lt;role name="USER" /&gt;
	&lt;role name="ADMIN" /&gt;
    &lt;/security&gt;
  &lt;/feature&gt;
  
  &lt;!-- Will be "ON" only if 
   (1) Enable is set as true
   (2) Strategy predicate is true (here current &gt; releaseDate) -->
  &lt;feature uid="myFutureFeature" enable="true"&gt;
    &lt;flipstrategy class="org.ff4j.strategy.ReleaseDateFlipStrategy" &gt;
      &lt;param name="releaseDate" value="2020-07-14-14:00" /&gt;
    &lt;/flipstrategy&gt;
  &lt;/feature&gt;
  
  &lt;!-- Features</span> can be grouped to be toggled in the same time -->
  &lt;feature-group name="sprint_3"&gt;
    &lt;feature uid="userStory3_1" enable="false" /&gt;
    &lt;feature uid="userStory3_2" enable="false" /&gt;
  &lt;/feature-group&gt;
 
&lt;/features&gt;    
</pre>

<div class="prettyprint linenums">
<p><br/>In the <span class="source-code">src/test/java</span>, create the package <span class="source-code">org.ff4j.hello</span>
 with the following JUNIT class. We put several use cases to give you an overview. As I use to say, a piece of code is much clear than a long paragraph.</p> 
<pre style="font-family:courier new;font-size:13px">
package org.ff4j.hello;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.ff4j.FF4j;
import org.ff4j.exception.FeatureNotFoundException;
import org.junit.Test;

public class HelloTest {
    
    @Test
    public void my_first_test() {
        // Given: file exist
        assertNotNull(getClass().getClassLoader().getResourceAsStream("ff4j.xml"));
        // When: init
        FF4j ff4j = new FF4j("ff4j.xml");
        // Then
        assertEquals(5, ff4j.getFeatures().size());
        assertTrue(ff4j.exist("hello"));
        assertTrue(ff4j.check("hello"));
        
        // Usage
        if (ff4j.check("hello")) {
            // hello is toggle on
            System.out.println("Hello World !!");
        }
        
        // When: Toggle Off
        ff4j.disable("hello");
        // Then: expected to be off
        assertFalse(ff4j.check("hello"));
    }
    
    @Test
    public void how_does_AutoCreate_Works() {
        // Given: feature not exist
        FF4j ff4j = new FF4j("ff4j.xml");
        assertFalse(ff4j.exist("does_not_exist"));
        
        // When: use it
        try {
           if (ff4j.check("does_not_exist")) fail();
        } catch (FeatureNotFoundException fnfe) {
            // Then: exception
            System.out.println("By default, feature not found throw exception");
        }
        
        // When: using autocreate
        ff4j.setAutocreate(true);
        // Then: no more exceptions
        if (!ff4j.check("does_not_exist")) {
            System.out.println("Auto created and set as false");
        }
    }
    
    @Test
    public void how_groups_works() {
        // Given: 2 features 'off' within existing group
        FF4j ff4j = new FF4j("ff4j.xml");
        assertTrue(ff4j.exist("userStory3_1"));
        assertTrue(ff4j.exist("userStory3_2"));
        assertTrue(ff4j.getStore().readAllGroups().contains("sprint_3"));
        assertEquals("sprint_3", ff4j.getFeature("userStory3_1").getGroup());
        assertEquals("sprint_3", ff4j.getFeature("userStory3_2").getGroup());
        assertFalse(ff4j.check("userStory3_1"));
        assertFalse(ff4j.check("userStory3_2"));
        
        // When: toggle group on
        ff4j.getStore().enableGroup("sprint_3");
        
        // Then: all features on
        assertTrue(ff4j.check("userStory3_1"));
        assertTrue(ff4j.check("userStory3_2"));
    }
}</pre>
</div>

<p style="color:#AAA"><h2>Web Console</h2>	</p>

<div class="prettyprint linenums">
<p>In production you probably won't toggle Off your features programmatically (maybe to implement a circuit breaker), instead you will
 toggle features through web console.</p>
 <p/>FF4J provided 2 consoles : one is embedded as a servlet, the other
is a full-stack application  (operating with remote components through REST API). Here we will demonstrate the usage of the embedded.
 Add the following dependencies to your <span class="source-code">pom.xml</span> file.</p> 
<pre style="font-family:courier new;font-size:13px">&lt;dependency&gt;
 &lt;groupId&gt;org.ff4j&lt;/groupId&gt;
 &lt;artifactId&gt;ff4j-web&lt;/artifactId&gt;
 &lt;version&gt;1.3.0&lt;/version&gt;
&lt;/dependency&gt;
</pre></div>

<div class="prettyprint linenums">
<br/>The, add the following statement within <span class="source-code">&lt;build&gt;</span> tag. 
The purpose here is to execute our web application on jetty container
using the proper maven plugin. We also add <span class="source-code">src/test/resource</span> to jetty classpath,
where we created the <span class="source-code">ff4j.xml</span> file.<p/>
<pre style="font-family:courier new;font-size:13px">
&lt;plugins&gt;

 &lt;plugin&gt;
  &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
  &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
  &lt;version&gt;6.1.26&lt;/version&gt;
  &lt;configuration&gt;
   &lt;useTestClasspath&gt;true&lt;/useTestClasspath&gt;
   &lt;contextPath&gt;/hello&lt;/contextPath&gt;
   &lt;scanIntervalSeconds>5&lt;/scanIntervalSeconds&gt;
   &lt;stopPort&gt;8065&lt;/stopPort&gt;
   &lt;connectors&gt;
    &lt;connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
     &lt;port&gt;8080&lt;/port&gt;
     &lt;maxIdleTime>60000&lt;/maxIdleTime&gt;
    &lt;/connector&gt;
   &lt;/connectors&gt;
  &lt;/configuration&gt;
 &lt;/plugin&gt;
 
 &lt;plugin&gt;
  &lt;groupId>org.apache.maven.plugins&lt;/groupId&gt;
  &lt;artifactId>maven-compiler-plugin&lt;/artifactId&gt;
   &lt;configuration&gt;
    &lt;source&gt;1.7&lt;/source&gt;
    &lt;target&gt;1.7&lt;/target&gt;
    &lt;showWarnings>true&lt;/showWarnings&gt;
   &lt;/configuration&gt;
 &lt;/plugin&gt;
 
&lt;/plugins&gt;
</pre>
<br>You should be able to start your application with <span class="source-code">mvn jetty:run</span> and access URL <span class="source-code"><a href="http://localhost:8080/hello/">http://localhost:8080/hello/</a></span>
</div>

<div class="prettyprint linenums">
<br/>The administration console needs to find the instance of <span class="source-code">FF4j</span> to operate features. You have to define a class implementing <span class="source-code">org.ff4j.web.api.FF4JProvider</span>
and reference it when declaring the servlet.

<p><br/>Create a class <span class="source-code">MyFF4JProvider</span> in <span class="source-code">src/main/java</span> in the package of your choice with the following source code. Note that the single expected  method 
is <span class="source-code">getFF4j()</span><p/>
<pre style="font-family:courier new;font-size:13px">
package org.ff4j.hello;

import org.ff4j.FF4j;
import org.ff4j.web.api.FF4JProvider;

public class MyFF4jProvider implements FF4JProvider {

    private final FF4j ff4j;
   
    public MyFF4jProvider() {
        ff4j = new FF4j("ff4j.xml");
    }
  
    /** {@inheritDoc} */
    public FF4j getFF4j() { return ff4j; }
}
</pre>
<i>Note : If your are working with any dependency injection framework like Spring Framework you will probably 
inject ff4j as a bean it, but, here, we want to avoid any dependency.</i>   
</div>


<div class="prettyprint linenums">
<br/>Update your <span class="source-code"> web.xml</span> file and declare the servlet like the following :
<pre style="font-family:courier new;font-size:13px">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
                        http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
    version="3.0"&gt;

 &lt;display-name&gt;HelloWorld ff4j app&lt;/display-name&gt;
	
 &lt;servlet&gt;
  &lt;servlet-name&gt;ff4j-console&lt;/servlet-name&gt;
  &lt;servlet-class>org.ff4j.web.embedded.ConsoleServlet&lt;/servlet-class&gt;
  &lt;init-param&gt;
   &lt;param-name&gt;ff4jProvider&lt;/param-name&gt;
   &lt;param-value&gt;org.ff4j.hello.MyFF4jProvider&lt;/param-value&gt;
  &lt;/init-param&gt;
  &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
 &lt;/servlet&gt;
 
 &lt;servlet-mapping&gt;
   &lt;servlet-name&gt;ff4j-console&lt;/servlet-name&gt;
   &lt;url-pattern&gt;/ff4j-console&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
  
  &lt;welcome-file-list&gt;
   &lt;welcome-file&gt;index.jsp &lt;/welcome-file&gt;
  &lt;/welcome-file-list&gt;

 &lt;/web-app&gt;
</pre>
<br>You should be able access administration console <span class="source-code"><a href="http://localhost:8080/hello/ff4j-console">http://localhost:8080/hello/ff4j-console</a></span>

<p/><br/>
<a href="images/console-hello.png" target="_blank">
	<img src="images/console-hello.png" alt="" width="600px" style="border:1px solid #CCCCCC;"/>
</a>

<p>Every operation performed through this console are performed in-memory. At next restart, the state will be lost. To avoid this behavior you will need to change the  <span class="source-code">FeatureStore</span>
and choose among JDBC, MongoDB or Redis.

<p>The code of this sample (and many others) is available on github <a href="https://github.com/clun/ff4j-extra/tree/master/ff4j-samples/hello-ff4j">HERE</a>
</div>


<p style="color:#AAA"><h2>What's NEXT ?</h2>					
<p><br>This following introduction is the simplest code ever. A real getting started guide is available
on <b><a href="https://github.com/clun/ff4j#getting-started">github</a></b> and deals with integration with Spring, AOP
and externalization to JDBC. The <b><a href="http://sourceforge.net/projects/ff4j/files/1.3/ff4j-reference-guide-1.3.pdf/download">reference guide</b> </a>
contains all informations related to the framework. Finally there are a <a href="https://github.com/clun/ff4j-extra/tree/master/ff4j-samples">lot 
of <b>samples</b></a> available on github. At end, don't hesitate to raise your question to <b>support</b> <a href="https://groups.google.com/forum/?hl=fr#!forum/ff4j">google group</a></p>
     			
						</section>
						<!-- /Features -->

					</div>
					<!-- /Main -->

				</div>
			</div>
		</div>
	</div>
	<!-- /Main Wrapper -->

	<!-- Highlights Wrapper -->
	<div class="wrapper wrapper-style3">
		<div class="title"> Some Use Cases</div>
		<div class="container">
			<div class="row">
				<div class="12u">

					<!-- Highlights -->
					<div id="highlights">
						<div>
							<div class="row">
								<div class="4u">
									<section class="highlight highlight-one">
										<a href="images/usecase-featurebranching.png" class="image image-full"><img
											src="images/usecase-featurebranching.png" alt="" width="300px" height="200px"/></a>
										<h3>
											<a href="#">Avoid Feature Branching</a>
										</h3>
										<p>Feature branches lead to conflict during merges. Use trunk-based-developpement
										to toggle-off unfinished code when develop continously.</p>
									</section>
								</div>
								<div class="4u">
									<section class="highlight highlight-two">
										<a href="images/usecase-bluegreen.png" class="image image-full"><img
											src="images/usecase-bluegreen.png" alt="" width="300px" height="200px"/></a>
										<h3>
											<a href="#">Blue/Green Deployments</a>
										</h3>
										<p>Avoid clusters nodes inconsistency during deployment and deliver new features desactivated. Toggle
										"ON"" when all nodes are up-to-date and ready.</p>
									</section>
								</div>
								<div class="4u">
									<section class="highlight highlight-three">
										<a href="images/usecase-canary.png" class="image image-full"><img
											src="images/usecase-canary.png" alt="" width="300px" height="200px"/></a>
										<h3>
											<a href="#">Canary Release</a>
										</h3>
										<p>Do not create dedicated infrastructure to qualify new features. Open them for subset of beta-testers
										and directly into production environments.</p>
									</section>
								</div>
							</div>
							<div class="row">
								<div class="4u">
									<section class="highlight highlight-one">
										<a href="images/usecase-darklaunch.png" class="image image-full"><img
											src="images/usecase-darklaunch.png" alt="" width="300px" height="200px"/></a>
										<h3>
											<a href="#">Dark Launch</a>
										</h3>
										<p>Measure performance impacts of new features. Activate them dynamically on a 
										defined ratio of incoming requests and observe system responses.</p>
									</section>
								</div>
								<div class="4u">
									<section class="highlight highlight-two">
										<a href="images/usecase-graceful.png" class="image image-full"><img
											src="images/usecase-graceful.png" alt="" width="300px" height="200px"/></a>
										<h3>
											<a href="#">Graceful degradation</a>
										</h3>
										<p>Tune and protect your system of heavy loads: focus on high business value requests and
										discard others dynamically (clients vs prospects, carts contents..).</p>
									</section>
								</div>
								<div class="4u">
									<section class="highlight highlight-three">
										<a href="images/usecase-thinclient.png" class="image image-full"><img
											src="images/usecase-thinclient.png" alt="" width="300px" height="200px"/></a>
										<h3>
											<a href="#">Thin client application</a>
										</h3>
										<p>Avoid annoying frequent deployments and downloads of mobile applications by providing empty 
										shelf: request expected active features to YOUR servers.</p>
									</section>
								</div>
							</div>
							<div class="row">
								<div class="4u">
									<section class="highlight highlight-one">
										<a href="images/usecase-businesstoggle.png" class="image image-full"><img
											src="images/usecase-businesstoggle.png" alt="" width="300px" height="200px"/></a>
										<h3>
											<a href="#">Business Toggle</a>
										</h3>
										<p>Toggling is not only technical. Define your own rules and evaluate features based on
										business requirements like office hours, user profiles...</p>
									</section>
								</div>
								<div class="4u">
									<section class="highlight highlight-two">
										<a href="images/usecase-abtesting.png" class="image image-full"><img
											src="images/usecase-abtesting.png" alt="" width="300px" height="200px"/></a>
										<h3>
											<a href="#">A/B Testing</a>
										</h3>
										<p>Split A and B populations using a business toggle. Measure business impacts not only
										with CRM but also hitcounts of very same framework. </p>
									</section>
								</div>
								<div class="4u">
									<section class="highlight highlight-three">
										<a href="images/usecase-circuitbreaker.png" class="image image-full"><img
											src="images/usecase-circuitbreaker.png" alt="" width="300px" height="200px"/></a>
										<h3>
											<a href="#">Circuit Breaker</a>
										</h3>
										<p>Implement the <a href="http://martinfowler.com/bliki/CircuitBreaker.html">circuit breaker</a> pattern with a 
										dedicated strategy and custom rules allowing to toggle off proactively not available features.</p>
									</section>
								</div>
							</div>
						</div>
					</div>
					<!-- /Highlights -->

				</div>
			</div>
		</div>
	</div>
	<!-- /Highlights Wrapper -->

	<!-- Footer Wrapper -->
	<div id="footer-wrapper" class="wrapper">
		<div class="title">Links</div>
		<div class="container">
			<div class="row">
				<div class="12u">

					<!-- Footer -->
					<div id="footer">
						<div>
							<div class="row">
								
								<div class="12u">

									<!-- Contacts -->
									<section class="footer-two">
										<div class="feature-list feature-list-small">
											<div>
												<div class="row">
													<div class="4u">
														<section>
															<h4 class="fa fa-github"><a href="http://github.com/clun" style="color:#00ab8b">&nbsp;&nbsp;Github</a></h4>
															<p>
																
															</p>
														</section>
													</div>
													<div class="4u">
														<section>
															<h4 class="fa fa-twitter"><a href="http://twitter.com/clunven" style="color:#00ab8b">&nbsp;&nbsp;@clunven</h4>
														</section>
													</div>
													<div class="4u">
														<section>
															<h4 class="fa fa-envelope">
																<a href="https://groups.google.com/forum/?hl=fr#!forum/ff4j" style="color:#00ab8b">&nbsp;&nbsp;Support
															</h4>
														</section>
													</div>
												</div>
											</div>
										</div>
									</section>
								</div>
							</div>
						</div>
					</div>
					<!-- /Footer -->

					<!-- Copyright -->
					<div id="copyright">
						<span>  ff4j&copy; 2013-2016 - All right reserved.</span>
					</div>
					<!-- /Copyright -->

				</div>
			</div>
		</div>
	</div>
	<!-- /Footer Wrapper -->
	
	<a href="https://github.com/clun/ff4j"><img 
		style="position: absolute; top: 0; right: 0; border: 0;" 
		src="https://camo.githubusercontent.com/652c5b9acfaddf3a9c326fa6bde407b87f7be0f4/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6f72616e67655f6666373630302e706e67" 
		alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_green_007200.png"></a>
	
	<!-- Analytics -->
	<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-99337757-1', 'auto');
  ga('send', 'pageview');

</script>
	
</body>
</html>