<html><head></head><body><pre style="word-wrap: break-word; white-space: pre-wrap;">/********************************************************************************
 * JSON Parser (json2)
 * https://github.com/sstur/json2/blob/master/json2.js
 *********************************************************************************/
(function (bidtellect) {
    'use strict';

    var JSON = {};

    bidtellect.JSON = JSON;

    function f(n) {
        // Format integers to have at least two digits.
        return n &lt; 10 ? '0' + n : n;
    }

    var toString = Object.prototype.toString;

    var REPLACERS = {
        Date: function (key) {
            var ms = this.valueOf();
            return isFinite(this.valueOf())
                ? this.getUTCFullYear() + '-' +
                f(this.getUTCMonth() + 1) + '-' +
                f(this.getUTCDate()) + 'T' +
                f(this.getUTCHours()) + ':' +
                f(this.getUTCMinutes()) + ':' +
                f(this.getUTCSeconds()) + '.' +
                ('00' + (ms % 1000)).slice(-3) + 'Z'
                : null;
        },
        String: String.prototype.valueOf,
        Number: Number.prototype.valueOf,
        Boolean: Boolean.prototype.valueOf
    };

    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,
        indent,
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"': '\\"',
            '\\': '\\\\'
        },
        rep;


    function quote(string) {

        // If the string contains no control characters, no quote characters, and no
        // backslash characters, then we can safely slap some quotes around it.
        // Otherwise we must also replace the offending characters with safe escape
        // sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string'
                ? c
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }


    function str(key, holder) {

        // Produce a string from holder[key].

        var i,          // The loop counter.
            k,          // The member key.
            v,          // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key],
            toJSON;

        // If the value has a toJSON method, call it to obtain a replacement value.

        if (value &amp;&amp; typeof value === 'object') {
            toJSON = value.toJSON || REPLACERS[toString.call(value).slice(8, -1)];
            if (typeof toJSON === 'function') {
                value = toJSON.call(value, key);
            }
        }

        // If we were called with a replacer function, then call the replacer to
        // obtain a replacement value.

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

        // What happens next depends on the value's type.

        switch (typeof value) {
            case 'string':
                return quote(value);

            case 'number':

                // JSON numbers must be finite. Encode non-finite numbers as null.

                return isFinite(value) ? String(value) : 'null';

            case 'boolean':
            case 'null':

                // If the value is a boolean or null, convert it to a string. Note:
                // typeof null does not produce 'null'. The case is included here in
                // the remote chance that this gets fixed someday.

                return String(value);

            // If the type is 'object', we might be dealing with an object or an array or
            // null.

            case 'object':

                // Due to a specification blunder in ECMAScript, typeof null is 'object',
                // so watch out for that case.

                if (!value) {
                    return 'null';
                }

                // Make an array to hold the partial results of stringifying this object value.

                gap += indent;
                partial = [];

                // Is the value an array?

                if (toString.apply(value) === '[object Array]') {

                    // The value is an array. Stringify every element. Use null as a placeholder
                    // for non-JSON values.

                    length = value.length;
                    for (i = 0; i &lt; length; i += 1) {
                        partial[i] = str(i, value) || 'null';
                    }

                    // Join all of the elements together, separated with commas, and wrap them in
                    // brackets.

                    v = partial.length === 0
                        ? '[]'
                        : gap
                            ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
                            : '[' + partial.join(',') + ']';
                    gap = mind;
                    return v;
                }

                // If the replacer is an array, use it to select the members to be stringified.

                if (rep &amp;&amp; typeof rep === 'object') {
                    length = rep.length;
                    for (i = 0; i &lt; length; i += 1) {
                        if (typeof rep[i] === 'string') {
                            k = rep[i];
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ': ' : ':') + v);
                            }
                        }
                    }
                } else {

                    // Otherwise, iterate through all of the keys in the object.

                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ': ' : ':') + v);
                            }
                        }
                    }
                }

                // Join all of the member texts together, separated with commas,
                // and wrap them in braces.

                v = partial.length === 0
                    ? '{}'
                    : gap
                        ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
                        : '{' + partial.join(',') + '}';
                gap = mind;
                return v;
        }
    }

    // If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {

            // The stringify method takes a value and an optional replacer, and an optional
            // space parameter, and returns a JSON text. The replacer can be a function
            // that can replace values, or an array of strings that will select the keys.
            // A default replacer method can be provided. Use of the space parameter can
            // produce text that is more easily readable.

            var i;
            gap = '';
            indent = '';

            // If the space parameter is a number, make an indent string containing that
            // many spaces.

            if (typeof space === 'number') {
                for (i = 0; i &lt; space; i += 1) {
                    indent += ' ';
                }

                // If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === 'string') {
                indent = space;
            }

            // If there is a replacer, it must be a function or an array.
            // Otherwise, throw an error.

            rep = replacer;
            if (replacer &amp;&amp; typeof replacer !== 'function' &amp;&amp;
                (typeof replacer !== 'object' ||
                    typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

            // Make a fake root object containing our value under the key of ''.
            // Return the result of stringifying the value.

            return str('', { '': value });
        };
    }


    // If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {

            // The parse method takes a text and an optional reviver function, and returns
            // a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

                // The walk method is used to recursively walk the resulting structure so
                // that modifications can be made.

                var k, v, value = holder[key];
                if (value &amp;&amp; typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


            // Parsing happens in four stages. In the first stage, we replace certain
            // Unicode characters with escape sequences. JavaScript handles many characters
            // incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

            // In the second stage, we run the text against regular expressions that look
            // for non-JSON patterns. We are especially concerned with '()' and 'new'
            // because they can cause invocation, and '=' because it can cause mutation.
            // But just to be safe, we want to reject all unexpected forms.

            // We split the second stage into 4 regexp operations in order to work around
            // crippling inefficiencies in IE's and Safari's regexp engines. First we
            // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
            // replace all simple value tokens with ']' characters. Third, we delete all
            // open brackets that follow a colon or comma or that begin the text. Finally,
            // we look to see that the remaining characters are only whitespace or ']' or
            // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

            if (/^[\],:{}\s]*$/
                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                // In the third stage we use the eval function to compile the text into a
                // JavaScript structure. The '{' operator is subject to a syntactic ambiguity
                // in JavaScript: it can begin a block or an object literal. We wrap the text
                // in parens to eliminate the ambiguity.

                j = eval('(' + text + ')');

                // In the optional fourth stage, we recursively walk the new structure, passing
                // each name/value pair to a reviver function for possible transformation.

                return typeof reviver === 'function'
                    ? walk({ '': j }, '')
                    : j;
            }

            // If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError('JSON.parse');
        };
    }
})(window.bidtellect = window.bidtellect || {});

/********************************************************************************
 * Identity
 *********************************************************************************/

(function (bidtellect) {
    bidtellect.identity = bidtellect.identity || {
        generate: function (callback) {
            callback();
            return;
        }
    };
})(window.bidtellect = window.bidtellect || {});


/********************************************************************************
 * util (stripped to only have bidtellect.ready
 *********************************************************************************/
(function (bidtellect) {
    bidtellect.ready = (function () {
        var ready_event_fired = false;
        var ready_event_listener = function (fn) {
            var idempotent_fn = function () {
                if (ready_event_fired) {
                    return;
                }
                ready_event_fired = true;
                return fn();
            };
            var do_scroll_check = function () {
                if (ready_event_fired) {
                    return;
                }
                try {
                    document.documentElement.doScroll('left');
                } catch (e) {
                    setTimeout(do_scroll_check, 1);
                    return;
                }

                return idempotent_fn();
            };
            if (document.readyState === "complete") {
                return idempotent_fn();
            }

            if (document.addEventListener) {
                document.addEventListener("DOMContentLoaded", idempotent_fn, false);
                window.addEventListener("load", idempotent_fn, false);
            } else if (document.attachEvent) {
                document.attachEvent("onreadystatechange", idempotent_fn);
                window.attachEvent("onload", idempotent_fn);
                var toplevel = false;

                try {
                    toplevel = window.frameElement == null;
                } catch (e) {
                }

                if (document.documentElement.doScroll &amp;&amp; toplevel) {
                    return do_scroll_check();
                }
            }
        };
        return ready_event_listener;
    })();


})(window.bidtellect = window.bidtellect || {});

/********************************************************************************
 * Ajax functions (edited to not use withCredentials)
 *********************************************************************************/
(function (bidtellect) {
    bidtellect.ajaxnocredentials = bidtellect.ajaxnocredentials || {
        getJson: function (url, success) {
            var xmlhttp = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
            url = url.replace(/^(https|http):/, '');

            // See these sources
            // http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/
            // http://msdn.microsoft.com/en-us/library/ie/dd573303%28v=vs.85%29.aspx
            // remove this once we move to the same domain
            if (xmlhttp.withCredentials == undefined &amp;&amp; window.XDomainRequest) {
                var xdr = new XDomainRequest(); // Create a new XDR object.
                if (xdr) {
                    // It appears these handlers need to be mapped or XDomainRequest fails.
                    xdr.onerror = function () {
                        ; // semicolon so we can put breakpoints here
                    };
                    xdr.ontimeout = function () {
                        ;
                    };
                    xdr.onprogress = function () {
                        ;
                    };
                    xdr.onload = function () {
                        var jsonObj = xdr.responseText ? bidtellect.JSON.parse(xdr.responseText) : null;
                        success(jsonObj);
                    };

                    xdr.timeout = 30000; // set timeout to 30 sec instead of the default 10 sec

                    // The URL is preset in the text area. This is passed in the
                    // open call with a get request.
                    xdr.open("get", url);

                    // The request is then sent to the server.
                    xdr.send();
                }
            } else {
                xmlhttp.onreadystatechange = function () {
                    if (xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200) {
                        if (success) {
                            var jsonObj = xmlhttp.responseText ? bidtellect.JSON.parse(xmlhttp.responseText) : null;
                            success(jsonObj);
                        }
                    }
                };
                xmlhttp.open("GET", url, true);
                //xmlhttp.withCredentials = true;
                xmlhttp.setRequestHeader("Accept", "application/json");
                xmlhttp.send();
            }
        },

        getText: function (url, success) {
            var xmlhttp = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
            url = url.replace(/^(https|http):/, '');
            xmlhttp.onreadystatechange = function () {
                if (xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200) {
                    if (success)
                        success(xmlhttp.responseText);
                }
            };
            xmlhttp.open("GET", url, true);
            //xmlhttp.withCredentials = true;
            xmlhttp.send();
        },

        postJson: function (url, obj, success) {
            var xmlhttp = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
            url = url.replace(/^(https|http):/, '');
            xmlhttp.onreadystatechange = function () {
                if (xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200) {
                    if (success)
                        success(xmlhttp.responseText);
                }
            };
            xmlhttp.open("GET", url, true);
            //xmlhttp.withCredentials = true;
            xmlhttp.setRequestHeader("Content-Type", "application/json");
            xmlhttp.send(JSON.stringify(this));
        },

        postFormEncoded: function (url, formData, success) {
            var xmlhttp = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
            url = url.replace(/^(https|http):/, '');
            xmlhttp.onreadystatechange = function () {
                if (xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200) {
                    if (success) {
                        var jsonObj = xmlhttp.responseText ? bidtellect.JSON.parse(xmlhttp.responseText) : null;
                        success(jsonObj);
                    }
                }
            };
            xmlhttp.open("POST", url, true);
            //xmlhttp.withCredentials = true;
            xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            xmlhttp.send(formData);

            return xmlhttp.responseText ? bidtellect.JSON.parse(xmlhttp.responseText) : null;
        }
    };
})(window.bidtellect = window.bidtellect || {});


/********************************************************************************
 * Analytics
 *********************************************************************************/
(function (bidtellect) {

    // config
    var _heartbeatUrl = "http://bttrack.com/engagement/event";
    var _pixelUrl = "http://bttrack.com/engagement/getpixels";
    var _delayExponentialBase = 1.12;
    var _delayMaxSeconds = 30;
    var _stopHeartbeatAfterMinutes = 15;
    var _creativeIdParamName = "bt_crid";
    var _placementIdParamName = "bt_plid";
    var _globalIdParamName = "bt_glid";


    // defines a piggyback object
    function Piggyback() {
        this.thirdPartyPixels = '';
        this.appendedPixels = false;

        this.appendPixels = function () {

            // no work to do if thirdPartyPixels is not defined
            if (!this.thirdPartyPixels) {
                return;
            }

            // prevent IE from calling event multiple times
            if (!this.appendedPixels) {
                var self = this,
                    frame = document.createElement('iframe'),
                    frameId = 'bt-pixels-14043';

                frame.id = frameId;
                frame.frameBorder = '0';
                frame.width = '1';
                frame.height = '1';

                document.body.appendChild(frame);

                var doc = frame.contentDocument || frame.contentWindow.document;

                // no more document.write!
                doc.body.innerHTML = self.thirdPartyPixels;
                this.appendedPixels = true;
            }
        };

        this.fromAjaxRequest = function (callback) {
            //if (console.log) console.log("from ajax request");
            var self = this;

            // Pull the ids off the most recent click
            var data = "gid=14043";

            window.bidtellect.ajaxnocredentials.getText(_pixelUrl + '?' + data, function (result) {
                //if(console.log) console.log("got pixels back")
                result = result || "";

                self.thirdPartyPixels = result;
                callback();
            });
        };
    }

    // define session object
    function Session() {
        this.globalId = '8aca737b-06a8-4def-9b8a-2f02edaf217f';
        this.creativeId = '';
        this.placementId = '';
        this.goalId = '14043';
        this.sessionId = 'd4ab4091-e4f7-461d-a607-3119f2fe9ae3';
        this.parentPublisherId = '';
        this.publisherId = '';
        this.siteId = '';
        this.commonId = '';
        this.heartbeat = 1;
        this.url = '';
        this.fingerprint = '';
        this.fingerprintProvider = '';


        this.init = function (callback) {
            this.url = this.getPageUrl();

            // trust the session id in local storage over the one in the cookie
            if (bidtellect.hasSessionStorage()) {
                var sessionStorageSessionId = sessionStorage.getItem("bt-session-id");

                // set the effective session id to the one from localstorage if it's defined, otherwise leave it alone
                this.sessionId = sessionStorageSessionId || this.sessionId;

                sessionStorage.setItem("bt-session-id", this.sessionId);
            }

            if(this.isValid())
                callback();
            //else if (console.log)
            //console.log("Failed to init...");
        };

        this.isValid = function () {
            //return ((this.creativeId != '' &amp;&amp; this.placementId != '' &amp;&amp; this.globalId != '') || this.fingerprint != '') &amp;&amp; this.sessionId != '';
            return (this.sessionId != '' &amp;&amp; this.globalId != '');
        };


        this.sendEvent = function () {
            var json = JSON.stringify(this);
            var url = _heartbeatUrl + "?input=" + encodeURIComponent(json);
            window.bidtellect.ajaxnocredentials.getText(url, function () { });
            this.heartbeat++; // increment heartbeat last so the first one has index 0. Imperative for aggregation to work.
        };

        this.getPageUrl = function () {
            var url = location.href;
            //url = window.bidtellect.removeQueryParameter(url, _creativeIdParamName);
            //url = window.bidtellect.removeQueryParameter(url, _placementIdParamName);
            //url = window.bidtellect.removeQueryParameter(url, _globalIdParamName);
            return url;
        };
    }

    var session = new Session();
    var piggyback = new Piggyback();

    // start the heartbeat loop after getting the Augur ID
    window.bidtellect.identity.generate(function () {
        if (window.bidtellect.identity.fingerprint) {
            //if (console.log) console.log("acquired fp")
            session.fingerprint = window.bidtellect.identity.fingerprint.value;
            session.fingerprintProvider = window.bidtellect.identity.fingerprint.provider;
        } else {
            //if (console.log) console.log("skipping fp");
        }


        // helper function to check if doclument is visible
        // should move into coomon
        function isHidden() {
            var prefixes = ['webkit', 'moz', 'ms', 'o'];

            // if 'hidden' is natively supported just return it
            if ('hidden' in document) return document.hidden;

            // otherwise loop over all the known prefixes until we find one
            for (var i = 0; i &lt; prefixes.length; i++) {
                if ((prefixes[i] + 'Hidden') in document)
                    return document[prefixes[i] + 'Hidden'];
            }

            // otherwise it's not supported
            return false;
        }

        session.init(function () {
            //if (console.log) console.log('initializing session...');
            if (!session.isValid()) {
                //if (console.log) console.log('missing data:', session);
                return;
            }

            //if (console.log) console.log("success");

            var count = 0;
            var startTime = new Date();
            var timerCallbck = function () {
                var secondsFromStart = (new Date().getTime() - startTime.getTime()) / 1000;

                // if doclument is hidden don't send event and keep checking if still hidden
                //if (console.log) console.log('hidden', isHidden());
                if (isHidden()) {
                    setTimeout(timerCallbck, 1000);
                    return;
                }

                if (secondsFromStart &lt;= (_stopHeartbeatAfterMinutes * 60)) {
                    //if (console.log) console.log("sending event...");
                    session.sendEvent();
                }

                var delay = Math.min(_delayExponentialBase * ++count, _delayMaxSeconds);
                //if (console.log) console.log('delay (sec): ', delay.toFixed(2), 'seconds from start: ', secondsFromStart.toFixed(2));

                if (secondsFromStart + delay &lt;= (_stopHeartbeatAfterMinutes * 60)) {
                    setTimeout(timerCallbck, delay * 1000);
                }
            };
            timerCallbck();
        });
    });


    // fetch the piggy backs and put them in the page when it's ready
    piggyback.fromAjaxRequest(function() {
        window.bidtellect.ready(function () {
            piggyback.appendPixels();
        });
    });

})(window.bidtellectEngagement = window.bidtellectEngagement || {});</pre></body></html>