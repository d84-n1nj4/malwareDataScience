Message-ID: <386912304.1267.1516265036873.JavaMail.confluence@SoloInfraAtlassian>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_1266_1021825565.1516265036869"

------=_Part_1266_1021825565.1516265036869
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Developer&#39;s Guideline for feature implementation</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    /* CONF-28544 cannot print multiple pages in IE */
    #splitter-content {
        position: relative !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }
}
-->
    </style>
</head>
<body>
    <h1>Developer&#39;s Guideline for feature implementation</h1>
    <div class=3D"Section1">
        <h2 id=3D"Developer'sGuidelineforfeatureimplementation-JIRA10e5696e=
-6ce0-373f-afc0-5e94cd3b8d4bSOLO-4781"> <span class=3D"jira-issue resolved"=
 data-jira-key=3D"SOLO-4781"> <a href=3D"https://solomoto.atlassian.net/bro=
wse/SOLO-4781" class=3D"jira-issue-key"><img class=3D"icon" src=3D"https://=
solomoto.atlassian.net/secure/viewavatar?size=3Dxsmall&amp;avatarId=3D10300=
&amp;avatarType=3Dissuetype">SOLO-4781</a> - <span class=3D"summary">Create=
 wiki page for MVC \ Repository \ Service\ Query agreements</span> <span cl=
ass=3D"aui-lozenge aui-lozenge-subtle aui-lozenge-success jira-macro-single=
-issue-export-pdf">Closed</span> </span> </h2>
<p>The aim we follow:&nbsp;</p>
<ul style=3D"list-style-type: square;">
<li>Simplify code comphrehension&nbsp;</li>
<li>Avoid code-review misunderstanding</li>
<li>Ability for simply segregation of services</li>
</ul>
<h2 id=3D"Developer'sGuidelineforfeatureimplementation-Models,Value-Objects=
,DTOs">Models, Value-Objects, DTOs</h2>
<p>Domain model in Solomoto platform is an anemic (simple) business entity:=
</p>
<ul style=3D"list-style-type: square;">
<li>Persists data without any huge saving operations</li>
<li>If is necessary to create any "NoMapping" properties, please use a <str=
ong>value-object</strong>, or any other methods.</li>
<li>No additional&nbsp;"endings" is required. It should be named as it is.<=
/li>
<li>Placing: &nbsp;<strong>Solomoto.DomainModel/&lt;feature name&gt;/</stro=
ng><strong><br></strong></li>
<li>Use any kind of mapping &nbsp;by attribute or fluent</li>
<li>Repositories return domain object, but can use any dao inside to constr=
uct domain object from persistence data<br><br>class Email{<br>&nbsp; &nbsp=
; &nbsp;string To;<br>&nbsp; &nbsp; &nbsp;string From;<br>}<br><br>Targeted=
Mail{<br>&nbsp; &nbsp;string Sender;<br>&nbsp; &nbsp;Email mail;<br>}</li>
</ul>
<p>Parameter-objects in solomoto (???)</p>
<ul>
<li>Simple with&nbsp;<strong>no-identity&nbsp;</strong>object&nbsp;</li>
<li>For interconnectivity between services</li>
<li>Is a reusable container of parameters</li>
<li>Placing: same as any of services using it</li>
</ul>
<p>Value object</p>
<ul>
<li>Simple with&nbsp;<strong>no-identity&nbsp;</strong>object&nbsp;</li>
<li>immutable</li>
<li>sealed</li>
<li>created only by domain model&nbsp;</li>
<li>Placing: &nbsp;<strong>Solomoto.DomainModel/&lt;feature name&gt;/</stro=
ng></li>
</ul>
<p>DTOs object in solomoto</p>
<ul style=3D"list-style-type: square;">
<li>Data interchanging between back and front or between other environment&=
nbsp;</li>
<li>DTO is an object serialized \ deserialized as is and transferred over t=
he wire</li>
<li>Can be used only in receiving client (Controller. 3d party API client o=
r else), client is responsible for data mapping and exposing only domain mo=
dels in interface</li>
<li>Cannot be used in domain services</li>
<li>Use it to provide only required data for client (for example not all da=
ta from domain object)</li>
<li>Is allowed to reduce complexity and use domain model object to pass to =
the client.</li>
<li>Having <strong>"Dto"&nbsp;</strong>as ending in naming convention</li>
<li>Placing:&nbsp;<strong><span class=3D"inline-comment-marker" data-ref=3D=
"63ea298d-eb8e-4da0-8383-24b75ca3e656">Solomoto.WebFramewor</span>k/Models/=
&lt;feature name&gt;</strong></li>
</ul>
<h2 id=3D"Developer'sGuidelineforfeatureimplementation-Mapsandextensions">M=
aps and extensions</h2>
<p>Use <strong>extensions</strong> to map Domain Model to Dto and vise vers=
a</p>
<ul style=3D"list-style-type: square;">
<li>One static class per two way simple mapping - no additional parameters =
required (or logic)</li>
<li>Using :&nbsp;<br>&nbsp; &nbsp; &nbsp;var dtoA =3D myDomainModel.ToDtoA(=
);<br>&nbsp; &nbsp; &nbsp;var dtoB =3D myDomainModel.ToDtoB();<br>&nbsp; &n=
bsp; &nbsp;var myDomainObject =3D dtoA.ToDomain();<br>&nbsp; &nbsp; &nbsp;v=
ar myDomainObject =3D dtoB.ToDomain();<br><br></li>
<li>Naming: <strong>&lt;DomainModelType name&gt;Extension</strong><br><stro=
ng><br></strong></li>
<li>In some cases is not possible to use extensions, because it requires so=
me data from other sources. So you have to introduce <strong><span class=3D=
"inline-comment-marker" data-ref=3D"51ec1c80-ca43-4e19-b2cd-d4fb681ee2a1">M=
apper</span></strong></li>
<li>Placing:&nbsp;<strong>Solomoto.BusinessLayer/Mapping/&lt;feature name&g=
t;</strong></li>
<li><strong>You can use class or extension method with parameters</strong><=
/li>
</ul>
<h2 id=3D"Developer'sGuidelineforfeatureimplementation-Queries">Queries</h2=
>
<p>Query is an abstraction over one or more request to data sources returni=
ng domain models or DTOs.</p>
<p>Where to use ? Controllers or services?&nbsp;</p>
<p>It can be an <strong>Array</strong> or a <strong>specific element</stron=
g>. For best compatibility with the guidline it should <strong>not return a=
 IQueryable</strong> implementation, because query holds all logic of insid=
e of the query.</p>
<p>A query implements one of existing interfaces described in&nbsp;<strong>=
Solomoto.Abstraction/Common/IQuery.cs</strong></p>
<ul style=3D"list-style-type: square;">
<li>Interface.&nbsp;
<ul style=3D"list-style-type: square;">
<li>An interface should be inherited from <strong>IQuery&lt;&gt; </strong>o=
r<strong>&nbsp;IAsyncQuery&lt;&gt;&nbsp;</strong>generic and have <strong>a=
 clean name.</strong>&nbsp;</li>
<li>Having "<strong>Query</strong>" word as ending</li>
<li>Placing:&nbsp;<strong>Solomoto.Abstraction/Queries/&lt;feature name&gt;=
/</strong></li>
</ul></li>
<li>Implementation.&nbsp;
<ul style=3D"list-style-type: square;">
<li>Implementing just one interface, created for it.&nbsp;</li>
<li>In most cases the name is the same as interface. However it can be diff=
ered by data source - <strong>&lt;UsualName&gt;&lt;DataSource&gt;Query</str=
ong></li>
<li>As usual contains only one&nbsp;<strong>constructor parameter -&nbsp;Da=
taContext.</strong></li>
<li>Placing:&nbsp;<strong>Solomoto.BusinessLayer/Queries/&lt;feature name&g=
t;/</strong></li>
</ul></li>
</ul>
<p>You can see a typical query extracting all ToolHelpConfiguration having =
a specific HelpToolId.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: c#; gutter: false; theme: Confluence" data-theme=3D"Confluence">=20
=09public interface IToolHelpConfigurationsByToolIdQuery: IQuery&lt;int, IE=
numerable&lt;ToolHelpConfiguration&gt;&gt;
    {
    }
&nbsp;
    public class ToolHelpConfigurationsByToolIdQuery: IToolHelpConfiguratio=
nsByToolIdQuery
    {
        private readonly MongoDatabase _database;

        public ToolHelpConfigurationsByToolIdQuery(MongoDatabase database)
        {
            _database =3D database;
        }

        public IEnumerable&lt;ToolHelpConfiguration&gt; Query(int value)
        {
            var query =3D Query&lt;ToolHelpConfiguration&gt;.EQ(x =3D&gt; x=
.HelpToolId, value);
            return _database.GetCollection&lt;ToolHelpConfiguration&gt;(Con=
stants.Collections.ToolConfigurationConst.CollectionName)
                .Find(query).AsEnumerable();
        }
    }

</pre>=20
</div>
</div>
<h3 id=3D"Developer'sGuidelineforfeatureimplementation-QueryFactories"><spa=
n class=3D"inline-comment-marker" data-ref=3D"f50fb9bf-46e6-423e-aea5-0d1a7=
aae6130">Query Factories</span></h3>
<p>There are some situations where the Query factory can be included to you=
r mechanism of queries:</p>
<ul style=3D"list-style-type: square;">
<li><span class=3D"inline-comment-marker" data-ref=3D"29a7d1a1-c3dd-40cc-b3=
90-747f4737879a">Too many queries in DI - 5 or more simillar aggregate type=
 queries</span></li>
<li>&nbsp;It can be reusable in many injections</li>
<li>Placing: Same as queries</li>
<li>you can use domain repository as query factory</li>
</ul>
<p><strong>Drawbacks:&nbsp;</strong>Be aware of creating&nbsp;<strong>God&n=
bsp;</strong><strong>objects.</strong>&nbsp;Create query factory carefully =
following domain rule - <strong>factory per business entity</strong></p>
<p>The example below</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: c#; gutter: false; theme: Confluence" data-theme=3D"Confluence">&nbsp;   =
 public interface IQueryFactory&lt;T&gt;{
             T CreateQuery();
     }=20
&nbsp;
     public interface IMyServiceFactory: IQueryFactory&lt;IMyDOmainEntityQu=
ery&gt;           =20
     {
&nbsp;
     }
&nbsp;
     public class MyService(IMyServiceFactory queryContainer)
     {
     =20
     }=20
&nbsp;
   =20
     public interface IQuestionThemeRepositoryA : IRepository&lt;QuestionTh=
eme&gt;
     {
        QuestionTheme[]  GetAll();
        int MaxOrderQuery();
     }=20
&nbsp;
     public interface IQuestionThemeRepositoryB : IRepository&lt;QuestionTh=
eme&gt;
     {
            IQuery&lt;int&gt; GetQuestionThemeMaxOrderQuery();      =20
=20
=09=09=09IQuery&lt;QuestionTheme[]&gt; GetAllQuery();   =20
     }
&nbsp;
     public interface IQuestionThemeQueryFactory   =20
=09 {       =20
=09=09=09IQuery&lt;string[], string[]&gt; GetQuestionThemesNotInQuery();   =
=20
   =20
=09=09=09IQuery&lt;int&gt; GetQuestionThemeMaxOrderQuery();      =20
=20
=09=09=09IQuery&lt;QuestionTheme[]&gt; GetAllQuery();   =20
=09 }
&nbsp;
    public class QuestionThemeQueryFactory: IQuestionThemeQueryFactory   =
=20
=09{       =20
=09=09private readonly MongoDatabase _database;   =20
   =20
=09=09public QuestionThemeQueryFactory(MongoDatabase database)       =20
=09=09{           =20
=09=09=09_database =3D database;       =20
=09=09}       =20
&nbsp;
=09=09public IQuery&lt;string[], string[]&gt; GetQuestionThemesNotInQuery()=
       =20
=09=09{           =20
=09=09=09return new QuestionThemesNotInQuery(_database);       =20
=09=09}
       =20
=09=09public IQuery&lt;int&gt; GetQuestionThemeMaxOrderQuery()       =20
=09=09{           =20
=09=09=09return new QueryThemeMaxOrderQuery(_database);       =20
=09=09}       =20
&nbsp;
=09=09public IQuery&lt;QuestionTheme[]&gt; GetAllQuery()       =20
=09=09{           =20
=09=09=09return new AllQuestionsThemesQuery(_database);       =20
=09=09}   =20
=09}
&nbsp;</pre>=20
</div>
</div>
<p>&nbsp;</p>
<h2 id=3D"Developer'sGuidelineforfeatureimplementation-Repositories">Reposi=
tories</h2>
<p>Repository in general is implemented by <strong><span class=3D"inline-co=
mment-marker" data-ref=3D"bc9604e9-5f29-4f18-868b-29f295f95650">IRepository=
&lt;TEntity&gt;</span>&nbsp;</strong>interface. (<strong>IEFRepository</str=
ong>&nbsp;for MSSQL entities as additional)</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: c#; gutter: false; theme: Confluence" data-theme=3D"Confluence">    publi=
c interface IRepository&lt;TEntity, TKey&gt; where TEntity : class
    {
        TEntity Get(TKey key);
        TEntity Create(TEntity entity);
        void Update(TEntity entity);
        void Delete(TKey key);
    }</pre>=20
</div>
</div>
<p>&nbsp;</p>
<p>Interface</p>
<ul style=3D"list-style-type: square;">
<li>A pure repository can process only&nbsp;<strong>single</strong>&nbsp;in=
stance (<strong>CRUD</strong>)</li>
<li>Naming: <strong>I&lt;domain model type&gt;Repository</strong></li>
<li>Placing:&nbsp;<strong>Solomoto.Abstraction/Repositories/&lt;feature nam=
e&gt;<br></strong></li>
</ul>
<p>Implementaion</p>
<ul style=3D"list-style-type: square;">
<li><strong>NO additional logic</strong> inside repository implementation</=
li>
<li>Naming: Same as Interface</li>
<li>Placing:&nbsp;<strong>Solomoto.&lt;DataLayer MSSQLDataLayer | MongoData=
Layer&gt;/Repositories/&lt;feature name&gt;</strong></li>
</ul>
<h2 id=3D"Developer'sGuidelineforfeatureimplementation-Services">Services</=
h2>
<p>Create service to implement a certain domain logic. Works with domian/in=
frastructure/application logic (see <a href=3D"https://lostechies.com/jimmy=
bogard/2008/08/21/services-in-domain-driven-design/" class=3D"external-link=
" rel=3D"nofollow">Services briefly</a>)</p>
<p>All services should obey&nbsp;<a href=3D"https://en.wikipedia.org/wiki/S=
ingle_responsibility_principle" class=3D"external-link" rel=3D"nofollow">SR=
P</a></p>
<p>Does <strong>not work with Dto</strong>&nbsp;excepting Situation where i=
t needs to (For instance tricky or complicated mapping)</p>
<p>Interface</p>
<ul style=3D"list-style-type: square;">
<li>Naming: <strong>I&lt;encapsulated functionality&gt;Service</strong></li=
>
<li>Placing:&nbsp;<strong>Solomoto.Abstraction/Services/&lt;feature name&gt=
;</strong></li>
</ul>
<p>Implamentation</p>
<ul style=3D"list-style-type: square;">
<li>Naming: Same as interface</li>
<li>Placing:&nbsp;<strong>Solomoto.BusinessLayer/Services/&lt;feature name&=
gt;</strong></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
    </div>
</body>
</html>
------=_Part_1266_1021825565.1516265036869--
