 
 <!-- 
 (new Image).src="https://store.yahoo.net/cgi-bin/refsd?e=http://allpro2.stores.yahoo.net/pewocupco.html&h=allpro2.stores.yahoo.net&v=1.0&dr=" + escape(document.referrer); 
 --> 
 
<br><br>var icpForm7048 = document.getElementById('icpsignup7048');<br><br>if (document.location.protocol === "https:")<br><br>icpForm7048.action = "https://app.icontact.com/icp/signup.php";
function verifyRequired7048() {
  if (icpForm7048["fields_email"].value == "") {
    icpForm7048["fields_email"].focus();
    alert("The Email field is required.");
    return false;
  }<br><br>
return true;
}


csell_env = 'bf1';
 var storeCheckoutDomain = 'order.store.yahoo.net';


if(typeof YAHOO=="undefined"){YAHOO={};}
if(!YAHOO.ULT){YAHOO.ULT={};}
if(!YAHOO.ULT.BEACON){YAHOO.ULT.BEACON="http://geo.yahoo.com/t";}
if(!YAHOO.ULT.IMG){YAHOO.ULT.IMG=new Image();}
YAHOO.ULT.SRC_SPACEID_KEY='_S';YAHOO.ULT.DEST_SPACEID_KEY='_s';YAHOO.ULT.YLC_LIBSRC=2;YAHOO.ULT.CTRL_C='\x03';YAHOO.ULT.CTRL_D='\x04';YAHOO.ULT.BASE64_STR="ABCDEFGHIJKLMNOP"+"QRSTUVWXYZabcdef"+"ghijklmnopqrstuv"+"wxyz0123456789._-";(function(){YAHOO.ULT.track_click=function(u,p){if(!u||!p){return u;}
p._r=YAHOO.ULT.YLC_LIBSRC;var ks=[];var i=0;for(var k in p){var v=p[k];if(typeof(v)=='undefined'){v=p[k]='';}
if(k.length<1){return u;}
if(k.length>8){return u;}
if(k.indexOf(' ')!=-1){return u;}
if(YAHOO.ULT.has_ctrl_char(k)||YAHOO.ULT.has_ctrl_char(v)){return u;}
ks[i++]=k;}
ks=ks.sort();var f=[];for(i=0;i<ks.length;i++){f[i]=ks[i]+YAHOO.ULT.CTRL_C+p[ks[i]];}
f=f.join(YAHOO.ULT.CTRL_D);if(f.length<1||f.length>1024){return u;}
f=';_ylc='+YAHOO.ULT.encode64(f);i=u.indexOf('/*');if(i==-1){i=u.indexOf('/?');}
if(i==-1){i=u.indexOf('?');}
if(i==-1){return u+f;}else{return u.substr(0,i)+f+u.substr(i);}};YAHOO.ULT.beacon_click=function(p,i){if(!i){i=YAHOO.ULT.IMG;}
if(p){var url=YAHOO.ULT.track_click(YAHOO.ULT.BEACON,p);url+='?t='+Math.random();i.src=url;}
return true;};YAHOO.ULT.has_ctrl_char=function(s){for(var i=0;i<s.length;i++){if(s.charCodeAt(i)<0x20){return true;}}
return false;};YAHOO.ULT.encode64=function(input){var output="";var chr1,chr2,chr3="";var enc1,enc2,enc3,enc4="";var i=0;do{chr1=input.charCodeAt(i++);chr2=input.charCodeAt(i++);chr3=input.charCodeAt(i++);enc1=chr1>>2;enc2=((chr1&3)<<4)|(chr2>>4);enc3=((chr2&15)<<2)|(chr3>>6);enc4=chr3&63;if(isNaN(chr2)){enc3=enc4=64;}else if(isNaN(chr3)){enc4=64;}
output=output+
YAHOO.ULT.BASE64_STR.charAt(enc1)+
YAHOO.ULT.BASE64_STR.charAt(enc2)+
YAHOO.ULT.BASE64_STR.charAt(enc3)+
YAHOO.ULT.BASE64_STR.charAt(enc4);chr1=chr2=chr3="";enc1=enc2=enc3=enc4="";}while(i<input.length);return output;};})();
/* ------------------------------------------------------------------------------------- */
/* Namespace Declarations.                                                               */
/* ------------------------------------------------------------------------------------- */

var YStore = window.YStore || {};

/* ------------------------------------------------------------------------------------- */
/* Cross Sell Beacon Common Code                                                         */
/* ------------------------------------------------------------------------------------- */
/* This object contains functions and variables common to all Cross Sell Beacon stuff    */
/* ------------------------------------------------------------------------------------- */

YStore.CrossSellBeacon = function() {
	/* addEvent: simplified event attachment */
	function addEvent( obj, type, fn ) {
   		if (obj.addEventListener) {
       			obj.addEventListener( type, fn, false );
       			EventCache.add(obj, type, fn);
   		}
		else if (obj.attachEvent) {
       			obj["e"+type+fn] = fn;
       			obj[type+fn] = function() { obj["e"+type+fn]( window.event ); }
       			obj.attachEvent( "on"+type, obj[type+fn] );
       			EventCache.add(obj, type, fn);
		}
		else {
       			obj["on"+type] = obj["e"+type+fn];
		}
	}

	var EventCache = function(){
   		var listEvents = [];
   		return {
       			listEvents : listEvents,
       			add : function(node, sEventName, fHandler){
           			listEvents.push(arguments);
       			},
       			flush : function(){
           			var i, item;
           			for(i = listEvents.length - 1; i >= 0; i = i - 1){
               				item = listEvents[i];
               				if(item[0].removeEventListener){
                   				item[0].removeEventListener(item[1], item[2], item[3]);
               				}
               				if(item[1].substring(0, 2) != "on"){
                   				item[1] = "on" + item[1];
               				}
               				if(item[0].detachEvent){
                   				item[0].detachEvent(item[1], item[2]);
               				}
               				item[0][item[1]] = null;
           			}
       			}
   		};
	}();
	addEvent(window,'unload',EventCache.flush);

	return {
		YS_MN: 'mYS1',
		V_MN: 'v_mn',
                lastViewBeaconUrl: '',
		img: null,
		
		validateKeys: function(obj, keyList) {
			for(var i = 0, len = keyList.length; i < len; i++) {
				var k = keyList[i];
				if (obj[k] === null || obj[k] === undefined) {
					return false;
				}
			}
			return true;
		},

		addRecData: function(urlId, url, itemId, modelName, seqIndex, vibesData) {

			if (urlId === undefined || urlId === null ||
			    url === undefined || url === null ||
			    itemId === undefined || itemId === null) {
				// LOG THIS
				return;
			}
			csell_page_rec_data[urlId] = {};
			csell_page_rec_data[urlId]['ui'] = urlId; // optional - only used for click beacon
			csell_page_rec_data[urlId]['u'] = url; // optional - only used for click beacon
			csell_page_rec_data[urlId]['ii'] = itemId;

			// add vibes data
			if (typeof vibesData === 'object') {
				for(var key in vibesData) {
					if (typeof vibesData[key] == 'string') {
						csell_page_rec_data[urlId][key] = vibesData[key];
					}
				}
			}
		},
		renderBeaconWithRecData: function(url) {

			if (url === null || url === undefined) {
				// LOG THIS
				return;
			}

			var vibesDataStr = '';
			if (typeof YStore.CrossSellBeacon.vibesData === 'object') {
				for(var key in YStore.CrossSellBeacon.vibesData) {
					if (typeof YStore.CrossSellBeacon.vibesData[key] == 'string') {
						vibesDataStr += '/'+key+'='+YStore.CrossSellBeacon.vibesData[key];
					}
				}
			}

			var dupeMap = {};

			var csell_page_rec_data_str = '';

			var found_v_mn = false;

			for(var key in csell_page_rec_data) {
				if (false === this.validateKeys(csell_page_rec_data[key], ['ii'])) {
					// LOG THIS
					continue;
				}

				if (typeof dupeMap[csell_page_rec_data[key]['ii']] === 'undefined') {
					// key indicates which reco this is for
					csell_page_rec_data_str += 'ii='+csell_page_rec_data[key]['ii'];

					found_v_mn = false;

					for(var vkey in csell_page_rec_data[key]) {
						var vval = csell_page_rec_data[key][vkey];

						if (typeof vval === 'string') {
							if ('v_' === vkey.substr(0, 2)) {
								csell_page_rec_data_str += ','+vkey+'='+csell_page_rec_data[key][vkey];

								if (0 === vkey.indexOf(this.V_MN)) {
									found_v_mn = true;
								}
							}
						}
					}

					if (false === found_v_mn) {
						csell_page_rec_data_str += ',';
						csell_page_rec_data_str += this.V_MN+'='+this.YS_MN;
					}

					csell_page_rec_data_str += ';';

					dupeMap[csell_page_rec_data[key]['ii']] = 1;
				}
			}
			this.img = new Image();
			this.lastViewBeaconUrl = url+vibesDataStr+'/recs='+csell_page_rec_data_str;
			this.img.src = this.lastViewBeaconUrl;
		},
		// Should ONLY be called after anchor tag that urlId refers to has been rendered
		setClickTagUrl: function(urlId) {

			if (urlId === null || urlId === undefined) {
				// LOG THIS
				return;
			}

			var el = document.getElementById(urlId);
			if (el === undefined || el === null) {
				// LOG THIS
				return;
			}

			if (csell_page_rec_data[urlId] === undefined) {
				// LOG THIS
				return;
			}

			var recData = csell_page_rec_data[urlId];

			if (false === this.validateKeys(recData, ['u', 'ii'])) {
					// LOG THIS
					return;
			}

			if (false === this.validateKeys(csell_page_data, ['si', 'ii', 'bt', 's'])) {
					// LOG THIS
					return;
			}

			var url = recData['u'];

			var typePrefix;
			if (urlId.match(/-image-/)) {
				typePrefix = 'i';
			}
			else if (urlId.match(/-order-btn-/)) {
				typePrefix = 'o';
			}
			else {
				typePrefix = 't';
			}

			// Possibly optimize so we do not need to copy as many fields- have this initialized on reco render
			// in addClickTagData func
			var data = {};
			data['si'] = csell_page_data['si'];
			data['srci'] = csell_page_data['ii'];
			data['bt'] = csell_page_data['bt']+typePrefix+'c';
			data['en'] = (typeof csell_env === 'string') ? csell_env : 'prod';
			data['dsti'] = recData['ii'];
			data[YAHOO.ULT.SRC_SPACEID_KEY] = csell_page_data['s'];
			data.inArray = '';

			// add vibes global data
			if (typeof YStore.CrossSellBeacon.vibesData === 'object') {
				for(var vkey in YStore.CrossSellBeacon.vibesData) {
					if (typeof YStore.CrossSellBeacon.vibesData[vkey] == 'string') {
						data[vkey] = YStore.CrossSellBeacon.vibesData[vkey];
					}
				}
			}

			var found_v_mn = false;

			// add vibes data for target item
			for(var vkey in recData) {
				var vval = recData[vkey];
				if (typeof vval === 'string') {
					if ('v_' === vkey.substr(0, 2)) {
						if (0 === vkey.indexOf(this.V_MN)) {
							found_v_mn = true;
						}

						data[vkey] = recData[vkey];
					}
				}
			}

			if (false === found_v_mn) {
				data[this.V_MN] = this.YS_MN;
			}

			YAHOO.ULT.BEACON = csell_page_data['url']+'/t';

			var el = document.getElementById(urlId);

			(function(data) {
				addEvent(el, 'click', function(e){ setTimeout(function(){ YAHOO.ULT.beacon_click(data); },0); });
			})(data);
		}
	};
}();


// Begin Yahoo Store Generated Code
 csell_page_data = {}; csell_page_rec_data = []; ts='TOK_STORE_ID';


// Begin Yahoo Store Generated Code
function csell_GLOBAL_INIT_TAG() { var csell_token_map = {}; csell_token_map['TOK_ITEM_ID_LIST'] = 'pewocupco'; csell_token_map['TOK_BEACON_TYPE'] = 'prod'; csell_token_map['TOK_RAND_KEY'] = 't'; csell_token_map['TOK_SPACEID'] = '2022276099'; csell_token_map['TOK_IS_ORDERABLE'] = '2'; csell_token_map['TOK_STORE_ID'] = 'allpro2'; csell_token_map['TOK_URL'] = 'https://geo.yahoo.com'; csell_token_map['TOK_ORDER_HOST'] = 'order.store.yahoo.net';  c = csell_page_data; var x = (typeof storeCheckoutDomain == 'string')?storeCheckoutDomain:'order.store.yahoo.net'; var t = csell_token_map; c['s'] = t['TOK_SPACEID']; c['url'] = t['TOK_URL']; c['si'] = t[ts]; c['ii'] = t['TOK_ITEM_ID_LIST']; c['bt'] = t['TOK_BEACON_TYPE']; c['rnd'] = t['TOK_RAND_KEY']; c['io'] = t['TOK_IS_ORDERABLE']; YStore.addItemUrl = 'http%s://'+x+'/'+t[ts]+'/ymix/MetaController.html?eventName.addEvent&cartDS.shoppingcart_ROW0_m_orderItemVector_ROW0_m_itemId=%s&cartDS.shoppingcart_ROW0_m_orderItemVector_ROW0_m_quantity=1&ysco_key_cs_item=1&sectionId=ysco.cart&ysco_key_store_id='+t[ts]; } 


// Begin Yahoo Store Generated Code
function csell_REC_VIEW_TAG() {  var env = (typeof csell_env == 'string')?csell_env:'prod'; var p = csell_page_data; var a = '/sid='+p['si']+'/io='+p['io']+'/ii='+p['ii']+'/bt='+p['bt']+'-view'+'/en='+env; var r=Math.random(); YStore.CrossSellBeacon.renderBeaconWithRecData(p['url']+'/p/s='+p['s']+'/'+p['rnd']+'='+r+a); } 


// Begin Yahoo Store Generated Code
var csell_token_map = {}; csell_token_map['TOK_PAGE'] = 'p'; csell_token_map['TOK_WS_URL'] = 'https://allpro2.csell.store.yahoo.net/cs/recommend?itemids=pewocupco&location=p'; csell_token_map['TOK_SHOW_CS_RECS'] = 'true'; csell_token_map['TOK_CURR_SYM'] = '$';  var t = csell_token_map; csell_GLOBAL_INIT_TAG(); YStore.page = t['TOK_PAGE']; YStore.currencySymbol = t['TOK_CURR_SYM']; YStore.crossSellUrl = t['TOK_WS_URL']; YStore.showCSRecs = t['TOK_SHOW_CS_RECS']; 
var YStore = window.YStore || {};
YStore.CrossSellRecs = (function() {
	
	// Configuration settings.
	var DEBUG = false;	
	var RETRY_LIMIT = 25;
	var RETRY_WAIT = 200; // In milliseconds.
	var orientationSettings = {
		h: { cellsPerRow: 3 },
		v: { cellsPerRow: 1 }
	};
	var classNames = {
		table: 'ystore-cross-sell-table',
		tableOrientation: {
			h: 'ystore-cross-sell-table-horizontal',
			v: 'ystore-cross-sell-table-vertical'
		},
		row: 'ystore-cross-sell-row',
		firstRow: 'ystore-cross-sell-row-first',
		lastRow: 'ystore-cross-sell-row-last',
		titleRow: 'ystore-cross-sell-title-row',
		titleCell: 'ystore-cross-sell-title-cell',
		title: 'ystore-cross-sell-title',		
		cell: 'ystore-cross-sell-cell ys_relatedItemDesc',
		firstCell: 'ystore-cross-sell-cell-first',
		lastCell: 'ystore-cross-sell-cell-last',
		
		img: 'ystore-cross-sell-product-image',
		imgLink: 'ystore-cross-sell-product-image-link',		
		caption: 'ystore-cross-sell-product-caption',
		name: 'ystore-cross-sell-product-name',
		price: 'ystore-cross-sell-product-price',
		regularPrice: 'ystore-cross-sell-product-reg-price',
		salePrice: 'ystore-cross-sell-product-sale-price',
		csDiscPrice: 'ystore-cross-sell-product-cs-disc-price',
		promo: 'ys_promo',
		orderButtonContainer: 'ystore-cross-sell-order-button-container',
		orderButton: 'ys_primary ysco_next_btn'
	};
	var ids = {
		script: 'ystore-cross-sell-script',
		containerDiv: 'ys_relatedItems',
		itemPrefix: 'ystore-cross-sell-item-',
		imgLinkPrefix: 'ystore-cross-sell-image-link-',
		nameLinkPrefix: 'ystore-cross-sell-name-link-',
		orderButtonPrefix: 'ystore-cross-sell-order-btn-'
	};	
	var defaultText = {
		regularPrice: 'Price: ',
		noSaleRegularPrice: 'Price: ',
		price: 'Price: ',
		salePrice: 'Sale Price: ',
		discountPriceProd: 'When purchased with this item: ',
		discountPriceCart: 'Add to Your Order Now and Pay Only: '
	};

	// Private variables.
	var requestStartTime;
	var retryAttempts = 0;
	var cached = {};
	var recViewTagCalled = false;
	
	// Private methods.
	
	// Utility methods.	
	function log(msg) {
		if(DEBUG) {
			if(typeof console != 'undefined') console.log(msg);
		}
	}

	function jsonScriptRequest(fullUrl) {
		log('Starting jsonScriptRequest, with URL: ' + fullUrl);
			
		requestStartTime = new Date();
		createEl('script', { type: 'text/javascript', src: fullUrl, id: ids.script, parent: document.getElementsByTagName("head").item(0) });
	}
	
	function createEl(elementType, attr) {
		var newEl = document.createElement(elementType);
		if(typeof attr === 'undefined') return newEl;

		if(attr.id) newEl.id = attr.id;
		if(attr.className) newEl.className = attr.className;
		if(attr.title) newEl.title = attr.title;

		if(attr.colSpan) newEl.colSpan = attr.colSpan;
		if(attr.href) newEl.setAttribute('href', attr.href);
		if(attr.type) newEl.setAttribute('type', attr.type);
		if(attr.value) newEl.setAttribute('value', attr.value);		
		if(attr.src) newEl.setAttribute('src', attr.src);
		if(attr.alt) newEl.setAttribute('alt', attr.alt);
		if(attr.border) newEl.setAttribute('border', attr.border);
		if(attr.text) newEl.innerHTML = attr.text;
		if(attr.onclick) newEl.onclick = attr.onclick;

		if(attr.parent && attr.insertBefore) attr.parent.insertBefore(newEl, attr.insertBefore);
		else if(attr.parent) attr.parent.appendChild(newEl);

		return newEl;
	}
 
	// CS specific methods.
	function requiredVarsSet() {
		return (
			typeof YStore !== 'undefined' && 
			typeof YStore.CrossSellBeacon !== 'undefined' &&
			typeof YStore.currencySymbol !== 'undefined' &&
			typeof YStore.showCSRecs !== 'undefined' &&
			typeof csell_REC_VIEW_TAG === 'function' &&
			YStore.showCSRecs === 'true' // This must be true (as a string) to continue.
		);
	}
	
	function requiredCapabilitiesPresent() {
		return (
			document && 
			document.getElementById && 
			document.getElementsByTagName && 
			document.createElement && 
			document.createTextNode && 
			document.getElementsByTagName("head").item(0).appendChild && 
			document.getElementsByTagName("head").item(0).setAttribute
		);
	}

	function requiredElementPresent() {
		try {
			var container = document.getElementById(ids.containerDiv);
			return (typeof container === 'object' && container != null && container.nodeType);
		}
		catch(e) {
			return false;
		}
	}
	
	function assembleUrl() {
		return YStore.crossSellUrl + ((YStore.crossSellUrl.match(/\?/)) ? '&' : '?') + 'callback=YStore.CrossSellRecs.asyncCallback&noCacheIE=' + (new Date()).getTime();
	}
	
	function assembleRecommendations(productArray, headerText, orientation, priceLabels) {
		if(!requiredElementPresent()) {
			if(retryAttempts < RETRY_LIMIT) {
				setTimeout(YStore.CrossSellRecs.retryAssembleRecs, RETRY_WAIT);
			}
			else {
				callRecViewTag();
			}
			return;
		}
		var container = document.getElementById(ids.containerDiv);

		if(orientation !== 'h' && orientation !== 'v') {
			orientation = (typeof YStore.page !== 'undefined' && YStore.page === 'p') ? 'h' : 'v';
		}
		var cellsPerRow = orientationSettings[orientation].cellsPerRow;

		if(priceLabels.price === '') priceLabels.price = defaultText.price;
		if(priceLabels.salePrice === '') priceLabels.salePrice = defaultText.salePrice;
		if(priceLabels.csDiscPrice === '') priceLabels.csDiscPrice = (typeof YStore.page !== 'undefined' && YStore.page === 'p') ? defaultText.discountPriceProd : defaultText.discountPriceCart;

		var table = createEl('table', { className: classNames.table + ' ' + classNames.tableOrientation[orientation], parent: container });
		var tableBody = createEl('tbody', { parent: table });
		var titleRow = createEl('tr', { className: classNames.titleRow, parent: tableBody });
		var titleCell = createEl('td', { colSpan: cellsPerRow, className: classNames.titleCell, parent: titleRow });
		var title = createEl('h3', { className: classNames.title, text: headerText, parent: titleCell });

		var funcsAvailable = (typeof YStore.CrossSellBeacon != 'undefined' && typeof YStore.CrossSellBeacon.setClickTagUrl === 'function' && typeof YStore.CrossSellBeacon.addRecData === 'function');
		var showOrderButton = ((typeof YStore.page === 'undefined' || YStore.page === 'c') && typeof YStore.addItemUrl !== 'undefined');

		for(var i = 0, len = productArray.length; i < len; i++) {
			var p = productArray[i];
			var classNameArray;
			if(i % cellsPerRow === 0) {
				classNameArray = [ classNames.row ];
				if(i === 0) classNameArray.push(classNames.firstRow);
				if(len - i <= cellsPerRow) classNameArray.push(classNames.lastRow);
				var row = createEl('tr', { className: classNameArray.join(' '), parent: tableBody });
			}

			classNameArray = [ classNames.cell ];
			if(i % cellsPerRow === 0) classNameArray.push(classNames.firstCell);
			if((i + 1) % cellsPerRow === 0) classNameArray.push(classNames.lastCell);			
			var cell = createEl('td', { className: classNameArray.join(' '), id: ids.itemPrefix + p.id, parent: row });

			var imgLinkId = ids.imgLinkPrefix + p.id;
			var prodLinkId = ids.nameLinkPrefix + p.id;
			var orderButtonId = ids.orderButtonPrefix + p.id;
			var imageExists = (typeof p.i !== 'undefined' && p.i != '');

			if(imageExists) {
				var imgLink = createEl('a', { id: imgLinkId, href: p.u, className: classNames.imgLink, parent: cell });
				var img = createEl('img', { className: classNames.img, src: p.i, alt: '', border: 0, parent: imgLink });
			}
			var caption = createEl('div', { className: classNames.caption, parent: cell });
			var prodName = createEl('h4', { className: classNames.name, parent: caption });
			var prodLink = createEl('a', { id: prodLinkId, href: p.u, text: p.n, parent: prodName });
			if(showOrderButton) (function() {
				var orderUrl = (typeof p.op !== 'undefined' && p.op === 0) ? // Set the Order button URL depending on whether there are options or not.
					YStore.addItemUrl.replace(/%s/, (document.location.href.indexOf('https') === -1) ? '' : 's').replace(/%s/, p.id)  + YStore.sessionInfo :
					p.u;
				var orderButtonContainer = createEl('div', { className: classNames.orderButtonContainer, parent: cell });
				if(typeof YStore.orderButtonFormatStr != 'undefined') {
					orderButtonContainer.innerHTML = YStore.orderButtonFormatStr.replace(/%s/, orderUrl).replace(/%s/, orderButtonId);
				}
				else {
					var orderButton = createEl('input', { className: classNames.orderButton, type: 'button', value: 'Order', onclick: function() { location.href = orderUrl; }, parent: orderButtonContainer });
				}
			})();
			
			if(typeof p.pt !== 'undefined' && p.pt !== 'r' && typeof p.rp !== 'undefined' && p.rp !== '' && p.p != p.rp) {
				var prodRegPrice = createEl('p', { 
					className: classNames.regularPrice, 
					text: priceLabels.price + ' ' + YStore.currencySymbol + p.rp, 
					parent: caption 
				});
				var prodPrice = createEl('p', { 
					className: classNames.price + ' ' + ((p.pt === 'c') ? classNames.csDiscPrice : classNames.salePrice) + ' ' + classNames.promo, 
					text: ((p.pt === 'c') ? priceLabels.csDiscPrice : priceLabels.salePrice) + ' ' + YStore.currencySymbol + p.p, 
					parent: caption 
				});
			}
			else { // This item has only a regular price.
				var prodPrice = createEl('p', { 
					className: classNames.price + ' ' + classNames.regularPrice, 
					text: priceLabels.price + ' ' + YStore.currencySymbol + p.p, 
					parent: caption 
				});				
			}

			// Add the tracking data to the URL of the anchor tags.
			if(funcsAvailable) {
				if(imageExists) {
					YStore.CrossSellBeacon.addRecData(ids.imgLinkPrefix + p.id, p.u, p.id, p.m, p.s, p.v);
					YStore.CrossSellBeacon.setClickTagUrl(imgLinkId);
				}

				YStore.CrossSellBeacon.addRecData(ids.nameLinkPrefix + p.id, p.u, p.id, p.m, p.s, p.v);
				YStore.CrossSellBeacon.setClickTagUrl(prodLinkId);

				// order button
				YStore.CrossSellBeacon.addRecData(ids.orderButtonPrefix + p.id, p.u, p.id, p.m, p.s, p.v);
				YStore.CrossSellBeacon.setClickTagUrl(orderButtonId);
			}
		}

		callRecViewTag();
	}
	
	function callRecViewTag() {
		if(recViewTagCalled || typeof YStore.CrossSellBeacon === 'undefined') return;
		if(typeof YStore.CrossSellBeacon.rid === 'undefined') YStore.CrossSellBeacon.rid = '';
		if(typeof YStore.CrossSellBeacon.sn === 'undefined') YStore.CrossSellBeacon.sn = '';
		log('Calling csell_REC_VIEW_TAG().');
		recViewTagCalled = true;
		csell_REC_VIEW_TAG();
	};

	// Public methods.
	
	return {
		retryAssembleRecs: function() { // Called after a delay if the container element isn't found yet.
			retryAttempts++;
			log('Retry attempt ' + retryAttempts + ' out of ' + RETRY_LIMIT + ', after a delay of ' + RETRY_WAIT + ' ms');
			assembleRecommendations(cached.recsArray, cached.header, cached.orientation, cached.priceLabels);
		},
	  
		asyncCallback: function(obj) {
			log('Total request time: ' + ((new Date()).getTime() - requestStartTime.getTime()) + ' ms');	
			// Guide to short variables names returned from the webservice:
			//	r: recommendations, an array of the products that have been recommended for this product page.
			//		id: product id.
			//		n: product name.
			//		p: product price.
			//		u: product URL.
			//		i: product image URL.
			//		op: 1 or 0 depending on whether the product has options or not.
			//		m: model name.
			//		s: sequence.
			//	rid: Used in beaconing, must be assigned to YStore.CrossSellBeacon.rid.
			//	sn: Used in beaconing, must be assigned to YStore.CrossSellBeacon.sn.
			if(typeof obj !== 'undefined' && 
					typeof obj.r !== 'undefined' && 
					typeof obj.h !== 'undefined' && 
					typeof obj.o !== 'undefined') {
				cached.recsArray = obj.r;
				cached.header = obj.h;
				cached.orientation = obj.o;
				cached.priceLabels = { // We don't check for these because they might not be set.
					price: obj.rpl,
					salePrice: obj.spl,
					csDiscPrice: obj.cpl
				};
				YStore.CrossSellBeacon.vibesData = (typeof obj.v === 'object') ? obj.v : {};

				assembleRecommendations(cached.recsArray, cached.header, cached.orientation, cached.priceLabels);
			}
			else {
				log('Async response does not include the needed data.');
				callRecViewTag();
			}
		},
		
		init: function() {
			if(requiredVarsSet() && requiredCapabilitiesPresent() && requiredElementPresent()) {
				if(typeof YStore.csellData !== 'undefined' && 
						typeof YStore.csellData.r !== 'undefined' && 
						typeof YStore.csellData.h !== 'undefined' && 
						typeof YStore.csellData.o !== 'undefined') { // The data is already present.
					log('Cross-sell data is already present.');
					cached.recsArray = YStore.csellData.r;
					cached.header = YStore.csellData.h;
					cached.orientation = YStore.csellData.o;
					cached.priceLabels = { // We don't check for these because they might not be set.
						price: YStore.csellData.rpl,
						salePrice: YStore.csellData.spl,
						csDiscPrice: YStore.csellData.cpl
					};
					YStore.CrossSellBeacon.vibesData = YStore.csellData.v;
					assembleRecommendations(cached.recsArray, cached.header, cached.orientation, cached.priceLabels);
				}
				else if(typeof YStore.crossSellUrl !== 'undefined') { 
					log('Cross-sell data not found. Fetching...');
					var asyncUrl = assembleUrl();
					jsonScriptRequest(asyncUrl);
				}
				else {
					log('Cross-sell data not found and webservice URL not found. Exiting');
					callRecViewTag();
				}
			}
			else {
				log('Cross-sell recs cannot be rendered; the needed variables, methods and HTML elements aren\'t set.');
				callRecViewTag();
			}
		}
	};
})();
YStore.CrossSellRecs.init();

(function (d, w) { var f = function () { var x = d.getElementsByTagName('SCRIPT')[0]; var s = d.createElement('SCRIPT'); s.type = 'text/javascript'; s.async = true; s.src = '//np.lexity.com/embed/YA/2e3ed5fcd29e6d3f6c6c99b4f2c883ff?id=05700e804bca'; x.parentNode.insertBefore(s, x); }; w.attachEvent ? w.attachEvent('onload',f) : w.addEventListener('load',f,false); }(document, window)); 
